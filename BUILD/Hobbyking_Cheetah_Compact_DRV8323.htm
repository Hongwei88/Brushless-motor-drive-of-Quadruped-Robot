<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\BUILD\Hobbyking_Cheetah_Compact_DRV8323.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\BUILD\Hobbyking_Cheetah_Compact_DRV8323.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050169: Last Updated: Tue Dec 08 20:03:59 2020
<BR><P>
<H3>Maximum Stack Usage =       1224 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; $Super$$main &rArr; Init_All_HW(GPIOStruct*) &rArr; Init_PWM(GPIOStruct*) &rArr; FastPWM::FastPWM(PinName, int) &rArr; pwmout_init &rArr; pwmout_period_us &rArr; pwmout_write &rArr; error &rArr; exit &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[12]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">NMI_Handler</a><BR>
 <LI><a href="#[13]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">HardFault_Handler</a><BR>
 <LI><a href="#[14]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">MemManage_Handler</a><BR>
 <LI><a href="#[15]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">BusFault_Handler</a><BR>
 <LI><a href="#[16]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">UsageFault_Handler</a><BR>
 <LI><a href="#[17]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">SVC_Handler</a><BR>
 <LI><a href="#[18]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">DebugMon_Handler</a><BR>
 <LI><a href="#[19]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">PendSV_Handler</a><BR>
 <LI><a href="#[1a]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">SysTick_Handler</a><BR>
 <LI><a href="#[2d]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d]">ADC_IRQHandler</a><BR>
 <LI><a href="#[226]">core_util_critical_section_enter</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21f]">mbed_assert_internal</a><BR>
 <LI><a href="#[22a]">core_util_critical_section_exit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21f]">mbed_assert_internal</a><BR>
 <LI><a href="#[29f]">pinmap_pinout</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c5]">error</a><BR>
 <LI><a href="#[2ac]">pin_function</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21f]">mbed_assert_internal</a><BR>
 <LI><a href="#[1c4]">Set_GPIO_Clock</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c5]">error</a><BR>
 <LI><a href="#[29d]">pinmap_peripheral</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c5]">error</a><BR>
 <LI><a href="#[1dc]">serial_init</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21f]">mbed_assert_internal</a><BR>
 <LI><a href="#[29e]">pinmap_merge</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c5]">error</a><BR>
 <LI><a href="#[2ae]">init_uart</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c5]">error</a><BR>
 <LI><a href="#[21f]">mbed_assert_internal</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a6]">mbed_die</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[8c]">&lang;Func2&rang;</a> from .\build\can.o(i.<Func2>) referenced from .\build\can.o(i._ZN4mbed3CANC1E7PinNameS1_i)
 <LI><a href="#[89]">&lang;Func4&rang;</a> from .\build\serialbase.o(i.<Func4>) referenced from .\build\serialbase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_i)
 <LI><a href="#[2d]">ADC_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[15]">BusFault_Handler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[2f]">CAN1_RX0_IRQHandler</a> from .\build\can_api.o(i.CAN1_RX0_IRQHandler) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[2f]">CAN1_RX0_IRQHandler</a> from .\build\can_api.o(i.CAN1_RX0_IRQHandler) referenced from .\build\can_api.o(i.can_irq_set)
 <LI><a href="#[30]">CAN1_RX1_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[31]">CAN1_SCE_IRQHandler</a> from .\build\can_api.o(i.CAN1_SCE_IRQHandler) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[31]">CAN1_SCE_IRQHandler</a> from .\build\can_api.o(i.CAN1_SCE_IRQHandler) referenced from .\build\can_api.o(i.can_irq_set)
 <LI><a href="#[2e]">CAN1_TX_IRQHandler</a> from .\build\can_api.o(i.CAN1_TX_IRQHandler) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[2e]">CAN1_TX_IRQHandler</a> from .\build\can_api.o(i.CAN1_TX_IRQHandler) referenced from .\build\can_api.o(i.can_irq_set)
 <LI><a href="#[59]">CAN2_RX0_IRQHandler</a> from .\build\can_api.o(i.CAN2_RX0_IRQHandler) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[59]">CAN2_RX0_IRQHandler</a> from .\build\can_api.o(i.CAN2_RX0_IRQHandler) referenced from .\build\can_api.o(i.can_irq_set)
 <LI><a href="#[5a]">CAN2_RX1_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[5b]">CAN2_SCE_IRQHandler</a> from .\build\can_api.o(i.CAN2_SCE_IRQHandler) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[5b]">CAN2_SCE_IRQHandler</a> from .\build\can_api.o(i.CAN2_SCE_IRQHandler) referenced from .\build\can_api.o(i.can_irq_set)
 <LI><a href="#[58]">CAN2_TX_IRQHandler</a> from .\build\can_api.o(i.CAN2_TX_IRQHandler) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[58]">CAN2_TX_IRQHandler</a> from .\build\can_api.o(i.CAN2_TX_IRQHandler) referenced from .\build\can_api.o(i.can_irq_set)
 <LI><a href="#[6d]">CEC_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[67]">DCMI_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[26]">DMA1_Stream0_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[27]">DMA1_Stream1_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[28]">DMA1_Stream2_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[29]">DMA1_Stream3_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[2a]">DMA1_Stream4_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[2b]">DMA1_Stream5_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[2c]">DMA1_Stream6_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[4a]">DMA1_Stream7_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[53]">DMA2_Stream0_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[54]">DMA2_Stream1_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[55]">DMA2_Stream2_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[56]">DMA2_Stream3_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[57]">DMA2_Stream4_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[5d]">DMA2_Stream5_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[5e]">DMA2_Stream6_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[5f]">DMA2_Stream7_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[18]">DebugMon_Handler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[21]">EXTI0_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[43]">EXTI15_10_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[22]">EXTI1_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[23]">EXTI2_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[24]">EXTI3_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[25]">EXTI4_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[32]">EXTI9_5_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[1f]">FLASH_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[4b]">FMC_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[68]">FPU_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[13]">HardFault_Handler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[3b]">I2C1_ER_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[3a]">I2C1_EV_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[3d]">I2C2_ER_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[3c]">I2C2_EV_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[62]">I2C3_ER_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[61]">I2C3_EV_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[70]">I2C4_Error_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[6f]">I2C4_Event_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[14]">MemManage_Handler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[12]">NMI_Handler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[5c]">OTG_FS_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[45]">OTG_FS_WKUP_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[64]">OTG_HS_EP1_IN_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[63]">OTG_HS_EP1_OUT_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[66]">OTG_HS_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[65]">OTG_HS_WKUP_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[1c]">PVD_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[19]">PendSV_Handler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[6c]">QuadSPI_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[20]">RCC_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[44]">RTC_Alarm_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[1e]">RTC_WKUP_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[11]">Reset_Handler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[6a]">SAI1_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[6b]">SAI2_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[4c]">SDIO_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[6e]">SPDIF_RX_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[3e]">SPI1_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[3f]">SPI2_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[4e]">SPI3_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[69]">SPI4_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[7e]">SPI_2linesRxISR_16BIT</a> from .\build\stm32f4xx_hal_spi.o(i.SPI_2linesRxISR_16BIT) referenced from .\build\stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_IT)
 <LI><a href="#[85]">SPI_2linesRxISR_16BITCRC</a> from .\build\stm32f4xx_hal_spi.o(i.SPI_2linesRxISR_16BITCRC) referenced from .\build\stm32f4xx_hal_spi.o(i.SPI_2linesRxISR_16BIT)
 <LI><a href="#[80]">SPI_2linesRxISR_8BIT</a> from .\build\stm32f4xx_hal_spi.o(i.SPI_2linesRxISR_8BIT) referenced from .\build\stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_IT)
 <LI><a href="#[86]">SPI_2linesRxISR_8BITCRC</a> from .\build\stm32f4xx_hal_spi.o(i.SPI_2linesRxISR_8BITCRC) referenced from .\build\stm32f4xx_hal_spi.o(i.SPI_2linesRxISR_8BIT)
 <LI><a href="#[7f]">SPI_2linesTxISR_16BIT</a> from .\build\stm32f4xx_hal_spi.o(i.SPI_2linesTxISR_16BIT) referenced from .\build\stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_IT)
 <LI><a href="#[81]">SPI_2linesTxISR_8BIT</a> from .\build\stm32f4xx_hal_spi.o(i.SPI_2linesTxISR_8BIT) referenced from .\build\stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_IT)
 <LI><a href="#[7b]">SPI_DMAAbortOnError</a> from .\build\stm32f4xx_hal_spi.o(i.SPI_DMAAbortOnError) referenced from .\build\stm32f4xx_hal_spi.o(i.HAL_SPI_IRQHandler)
 <LI><a href="#[7c]">SPI_RxISR_16BIT</a> from .\build\stm32f4xx_hal_spi.o(i.SPI_RxISR_16BIT) referenced from .\build\stm32f4xx_hal_spi.o(i.HAL_SPI_Receive_IT)
 <LI><a href="#[87]">SPI_RxISR_16BITCRC</a> from .\build\stm32f4xx_hal_spi.o(i.SPI_RxISR_16BITCRC) referenced from .\build\stm32f4xx_hal_spi.o(i.SPI_RxISR_16BIT)
 <LI><a href="#[7d]">SPI_RxISR_8BIT</a> from .\build\stm32f4xx_hal_spi.o(i.SPI_RxISR_8BIT) referenced from .\build\stm32f4xx_hal_spi.o(i.HAL_SPI_Receive_IT)
 <LI><a href="#[88]">SPI_RxISR_8BITCRC</a> from .\build\stm32f4xx_hal_spi.o(i.SPI_RxISR_8BITCRC) referenced from .\build\stm32f4xx_hal_spi.o(i.SPI_RxISR_8BIT)
 <LI><a href="#[82]">SPI_TxISR_16BIT</a> from .\build\stm32f4xx_hal_spi.o(i.SPI_TxISR_16BIT) referenced from .\build\stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit_IT)
 <LI><a href="#[83]">SPI_TxISR_8BIT</a> from .\build\stm32f4xx_hal_spi.o(i.SPI_TxISR_8BIT) referenced from .\build\stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit_IT)
 <LI><a href="#[17]">SVC_Handler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[1a]">SysTick_Handler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[71]">SystemInit</a> from .\build\system_clock.o(i.SystemInit) referenced from .\build\startup_stm32f446xx.o(.text)
 <LI><a href="#[1d]">TAMP_STAMP_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[33]">TIM1_BRK_TIM9_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[36]">TIM1_CC_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[35]">TIM1_TRG_COM_TIM11_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[34]">TIM1_UP_TIM10_IRQHandler</a> from .\build\main.o(i.TIM1_UP_TIM10_IRQHandler) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[37]">TIM2_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[38]">TIM3_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[39]">TIM4_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[4d]">TIM5_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[51]">TIM6_DAC_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[52]">TIM7_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[46]">TIM8_BRK_TIM12_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[49]">TIM8_CC_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[48]">TIM8_TRG_COM_TIM14_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[47]">TIM8_UP_TIM13_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[4f]">UART4_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[50]">UART5_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[84]">UART_DMAAbortOnError</a> from .\build\stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from .\build\stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[40]">USART1_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[41]">USART2_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[42]">USART3_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[60]">USART6_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[16]">UsageFault_Handler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[1b]">WWDG_IRQHandler</a> from .\build\startup_stm32f446xx.o(.text) referenced from .\build\startup_stm32f446xx.o(RESET)
 <LI><a href="#[93]">onMsgReceived()</a> from .\build\main.o(i._Z13onMsgReceivedv) referenced from .\build\main.o(i.main)
 <LI><a href="#[94]">serial_interrupt()</a> from .\build\main.o(i._Z16serial_interruptv) referenced from .\build\main.o(i.main)
 <LI><a href="#[a7]">PositionSensor::GetMechPositionFixed()</a> from .\build\positionsensor.o(i._ZN14PositionSensor20GetMechPositionFixedEv) referenced from .\build\positionsensor.o(.constdata__ZTV14PositionSensor)
 <LI><a href="#[ae]">PositionSensorAM5147::ZeroPosition()</a> from .\build\positionsensor.o(i._ZN20PositionSensorAM514712ZeroPositionEv) referenced from .\build\positionsensor.o(.constdata__ZTV20PositionSensorAM5147)
 <LI><a href="#[b0]">PositionSensorAM5147::SetElecOffset(float)</a> from .\build\positionsensor.o(i._ZN20PositionSensorAM514713SetElecOffsetEf) referenced from .\build\positionsensor.o(.constdata__ZTV20PositionSensorAM5147)
 <LI><a href="#[b3]">PositionSensorAM5147::SetMechOffset(float)</a> from .\build\positionsensor.o(i._ZN20PositionSensorAM514713SetMechOffsetEf) referenced from .\build\positionsensor.o(.constdata__ZTV20PositionSensorAM5147)
 <LI><a href="#[af]">PositionSensorAM5147::GetRawPosition()</a> from .\build\positionsensor.o(i._ZN20PositionSensorAM514714GetRawPositionEv) referenced from .\build\positionsensor.o(.constdata__ZTV20PositionSensorAM5147)
 <LI><a href="#[ab]">PositionSensorAM5147::GetElecPosition()</a> from .\build\positionsensor.o(i._ZN20PositionSensorAM514715GetElecPositionEv) referenced from .\build\positionsensor.o(.constdata__ZTV20PositionSensorAM5147)
 <LI><a href="#[ad]">PositionSensorAM5147::GetElecVelocity()</a> from .\build\positionsensor.o(i._ZN20PositionSensorAM514715GetElecVelocityEv) referenced from .\build\positionsensor.o(.constdata__ZTV20PositionSensorAM5147)
 <LI><a href="#[a9]">PositionSensorAM5147::GetMechPosition()</a> from .\build\positionsensor.o(i._ZN20PositionSensorAM514715GetMechPositionEv) referenced from .\build\positionsensor.o(.constdata__ZTV20PositionSensorAM5147)
 <LI><a href="#[ac]">PositionSensorAM5147::GetMechVelocity()</a> from .\build\positionsensor.o(i._ZN20PositionSensorAM514715GetMechVelocityEv) referenced from .\build\positionsensor.o(.constdata__ZTV20PositionSensorAM5147)
 <LI><a href="#[aa]">PositionSensorAM5147::GetMechPositionFixed()</a> from .\build\positionsensor.o(i._ZN20PositionSensorAM514720GetMechPositionFixedEv) referenced from .\build\positionsensor.o(.constdata__ZTV20PositionSensorAM5147)
 <LI><a href="#[b1]">PositionSensorAM5147::GetCPR()</a> from .\build\positionsensor.o(i._ZN20PositionSensorAM51476GetCPREv) referenced from .\build\positionsensor.o(.constdata__ZTV20PositionSensorAM5147)
 <LI><a href="#[a8]">PositionSensorAM5147::Sample(float)</a> from .\build\positionsensor.o(i._ZN20PositionSensorAM51476SampleEf) referenced from .\build\positionsensor.o(.constdata__ZTV20PositionSensorAM5147)
 <LI><a href="#[b2]">PositionSensorAM5147::WriteLUT(int*)</a> from .\build\positionsensor.o(i._ZN20PositionSensorAM51478WriteLUTEPi) referenced from .\build\positionsensor.o(.constdata__ZTV20PositionSensorAM5147)
 <LI><a href="#[b5]">mbed::FileHandle::size()</a> from .\build\filehandle.o(i._ZN4mbed10FileHandle4sizeEv) referenced from .\build\filehandle.o(.constdata__ZTVN4mbed10FileHandleE)
 <LI><a href="#[b5]">mbed::FileHandle::size()</a> from .\build\filehandle.o(i._ZN4mbed10FileHandle4sizeEv) referenced from .\build\stream.o(.constdata__ZTVN4mbed8FileLikeE)
 <LI><a href="#[b4]">mbed::FileHandle::isatty()</a> from .\build\filehandle.o(i._ZN4mbed10FileHandle6isattyEv) referenced from .\build\filehandle.o(.constdata__ZTVN4mbed10FileHandleE)
 <LI><a href="#[b4]">mbed::FileHandle::isatty()</a> from .\build\filehandle.o(i._ZN4mbed10FileHandle6isattyEv) referenced from .\build\stream.o(.constdata__ZTVN4mbed8FileLikeE)
 <LI><a href="#[8a]">mbed::SerialBase::_irq_handler(unsigned, SerialIrq)</a> from .\build\serialbase.o(i._ZN4mbed10SerialBase12_irq_handlerEj9SerialIrq) referenced from .\build\serialbase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_i)
 <LI><a href="#[a4]">mbed::SerialBase::interrupt_handler_asynch()</a> from .\build\serialbase.o(i._ZN4mbed10SerialBase24interrupt_handler_asynchEv) referenced from .\build\serialbase.o(.constdata)
 <LI><a href="#[b6]">mbed::SerialBase::lock()</a> from .\build\serialbase.o(i._ZN4mbed10SerialBase4lockEv) referenced from .\build\serialbase.o(.constdata__ZTVN4mbed10SerialBaseE)
 <LI><a href="#[b7]">mbed::SerialBase::unlock()</a> from .\build\serialbase.o(i._ZN4mbed10SerialBase6unlockEv) referenced from .\build\serialbase.o(.constdata__ZTVN4mbed10SerialBaseE)
 <LI><a href="#[b8]">mbed::SerialBase::~SerialBase()</a> from .\build\serialbase.o(i._ZN4mbed10SerialBaseD1Ev) referenced from .\build\serialbase.o(.constdata__ZTVN4mbed10SerialBaseE)
 <LI><a href="#[8e]">mbed::Transaction&lang;mbed::SPI&rang;::Transaction()</a> from .\build\spi.o(t._ZN4mbed11TransactionINS_3SPIEEC1Ev) referenced from .\build\spi.o(i.__sti___7_SPI_cpp_ab1f1164)
 <LI><a href="#[9b]">mbed::Transaction&lang;mbed::SPI&rang;::~Transaction()</a> from .\build\spi.o(t._ZN4mbed11TransactionINS_3SPIEED1Ev) referenced from .\build\spi.o(t._ZN4mbed14CircularBufferINS_11TransactionINS_3SPIEEELj2EjED1Ev)
 <LI><a href="#[8f]">mbed::CircularBuffer&lang;mbed::Transaction&lang;mbed::SPI&rang;, (unsigned)2, unsigned&rang;::~CircularBuffer()</a> from .\build\spi.o(t._ZN4mbed14CircularBufferINS_11TransactionINS_3SPIEEELj2EjED1Ev) referenced from .\build\spi.o(i.__sti___7_SPI_cpp_ab1f1164)
 <LI><a href="#[8d]">mbed::CAN::_irq_handler(unsigned, CanIrqType)</a> from .\build\can.o(i._ZN4mbed3CAN12_irq_handlerEj10CanIrqType) referenced from .\build\can.o(i._ZN4mbed3CANC1E7PinNameS1_i)
 <LI><a href="#[b9]">mbed::CAN::lock()</a> from .\build\can.o(i._ZN4mbed3CAN4lockEv) referenced from .\build\can.o(.constdata__ZTVN4mbed3CANE)
 <LI><a href="#[ba]">mbed::CAN::unlock()</a> from .\build\can.o(i._ZN4mbed3CAN6unlockEv) referenced from .\build\can.o(.constdata__ZTVN4mbed3CANE)
 <LI><a href="#[91]">mbed::CAN::~CAN()</a> from .\build\can.o(i._ZN4mbed3CAND1Ev) referenced from .\build\can.o(.constdata__ZTVN4mbed3CANE)
 <LI><a href="#[91]">mbed::CAN::~CAN()</a> from .\build\can.o(i._ZN4mbed3CAND1Ev) referenced from .\build\main.o(i.__sti___8_main_cpp_prefs)
 <LI><a href="#[a5]">mbed::SPI::irq_handler_asynch()</a> from .\build\spi.o(i._ZN4mbed3SPI18irq_handler_asynchEv) referenced from .\build\spi.o(.constdata)
 <LI><a href="#[bc]">mbed::SPI::lock()</a> from .\build\spi.o(i._ZN4mbed3SPI4lockEv) referenced from .\build\spi.o(.constdata__ZTVN4mbed3SPIE)
 <LI><a href="#[bb]">mbed::SPI::write(int)</a> from .\build\spi.o(i._ZN4mbed3SPI5writeEi) referenced from .\build\spi.o(.constdata__ZTVN4mbed3SPIE)
 <LI><a href="#[bd]">mbed::SPI::unlock()</a> from .\build\spi.o(i._ZN4mbed3SPI6unlockEv) referenced from .\build\spi.o(.constdata__ZTVN4mbed3SPIE)
 <LI><a href="#[92]">mbed::SPI::~SPI()</a> from .\build\spi.o(i._ZN4mbed3SPID1Ev) referenced from .\build\spi.o(.constdata__ZTVN4mbed3SPIE)
 <LI><a href="#[92]">mbed::SPI::~SPI()</a> from .\build\spi.o(i._ZN4mbed3SPID1Ev) referenced from .\build\main.o(i.__sti___8_main_cpp_prefs)
 <LI><a href="#[be]">mbed::Serial::lock()</a> from .\build\serial.o(i._ZN4mbed6Serial4lockEv) referenced from .\build\serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[c0]">mbed::Serial::_getc()</a> from .\build\serial.o(i._ZN4mbed6Serial5_getcEv) referenced from .\build\serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[c1]">mbed::Serial::_putc(int)</a> from .\build\serial.o(i._ZN4mbed6Serial5_putcEi) referenced from .\build\serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[bf]">mbed::Serial::unlock()</a> from .\build\serial.o(i._ZN4mbed6Serial6unlockEv) referenced from .\build\serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[90]">mbed::Serial::~Serial()</a> from .\build\main.o(i._ZN4mbed6SerialD1Ev) referenced from .\build\serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[90]">mbed::Serial::~Serial()</a> from .\build\main.o(i._ZN4mbed6SerialD1Ev) referenced from .\build\main.o(i.__sti___8_main_cpp_prefs)
 <LI><a href="#[cd]">mbed::Stream::lock()</a> from .\build\stream.o(i._ZN4mbed6Stream4lockEv) referenced from .\build\stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[c2]">mbed::Stream::read(void*, unsigned)</a> from .\build\stream.o(i._ZN4mbed6Stream4readEPvj) referenced from .\build\serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[c2]">mbed::Stream::read(void*, unsigned)</a> from .\build\stream.o(i._ZN4mbed6Stream4readEPvj) referenced from .\build\stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[c4]">mbed::Stream::seek(long, int)</a> from .\build\stream.o(i._ZN4mbed6Stream4seekEli) referenced from .\build\serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[c4]">mbed::Stream::seek(long, int)</a> from .\build\stream.o(i._ZN4mbed6Stream4seekEli) referenced from .\build\stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[c7]">mbed::Stream::size()</a> from .\build\stream.o(i._ZN4mbed6Stream4sizeEv) referenced from .\build\serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[c7]">mbed::Stream::size()</a> from .\build\stream.o(i._ZN4mbed6Stream4sizeEv) referenced from .\build\stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[c5]">mbed::Stream::close()</a> from .\build\stream.o(i._ZN4mbed6Stream5closeEv) referenced from .\build\serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[c5]">mbed::Stream::close()</a> from .\build\stream.o(i._ZN4mbed6Stream5closeEv) referenced from .\build\stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[c3]">mbed::Stream::write(const void*, unsigned)</a> from .\build\stream.o(i._ZN4mbed6Stream5writeEPKvj) referenced from .\build\serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[c3]">mbed::Stream::write(const void*, unsigned)</a> from .\build\stream.o(i._ZN4mbed6Stream5writeEPKvj) referenced from .\build\stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[c6]">mbed::Stream::isatty()</a> from .\build\stream.o(i._ZN4mbed6Stream6isattyEv) referenced from .\build\serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[c6]">mbed::Stream::isatty()</a> from .\build\stream.o(i._ZN4mbed6Stream6isattyEv) referenced from .\build\stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[ce]">mbed::Stream::unlock()</a> from .\build\stream.o(i._ZN4mbed6Stream6unlockEv) referenced from .\build\stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[cc]">mbed::Stream::~Stream__sub_object()</a> from .\build\stream.o(i._ZN4mbed6StreamD2Ev) referenced from .\build\stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[d1]">void mbed::Callback&lang;void(int)&rang;::function_call&lang;void(*)(int)&rang;(const void*, int)</a> from .\build\i2c.o(t._ZN4mbed8CallbackIFviEE13function_callIPS1_EEvPKvi) referenced from .\build\i2c.o(.constdata__ZZN4mbed8CallbackIFviEE8generateIPS1_EEvRKT_E3ops)
 <LI><a href="#[d3]">void mbed::Callback&lang;void(int)&rang;::function_dtor&lang;void(*)(int)&rang;(void*)</a> from .\build\i2c.o(t._ZN4mbed8CallbackIFviEE13function_dtorIPS1_EEvPv) referenced from .\build\i2c.o(.constdata__ZZN4mbed8CallbackIFviEE8generateIPS1_EEvRKT_E3ops)
 <LI><a href="#[d2]">void mbed::Callback&lang;void(int)&rang;::function_move&lang;void(*)(int)&rang;(void*, const void*)</a> from .\build\i2c.o(t._ZN4mbed8CallbackIFviEE13function_moveIPS1_EEvPvPKv) referenced from .\build\i2c.o(.constdata__ZZN4mbed8CallbackIFviEE8generateIPS1_EEvRKT_E3ops)
 <LI><a href="#[d4]">void mbed::Callback&lang;void()&rang;::function_call&lang;void(*)()&rang;(const void*)</a> from .\build\main.o(t._ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv) referenced from .\build\main.o(.constdata__ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops)
 <LI><a href="#[d6]">void mbed::Callback&lang;void()&rang;::function_dtor&lang;void(*)()&rang;(void*)</a> from .\build\main.o(t._ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv) referenced from .\build\main.o(.constdata__ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops)
 <LI><a href="#[d5]">void mbed::Callback&lang;void()&rang;::function_move&lang;void(*)()&rang;(void*, const void*)</a> from .\build\main.o(t._ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv) referenced from .\build\main.o(.constdata__ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops)
 <LI><a href="#[8b]">mbed::Callback&lang;void()&rang;::~Callback()</a> from .\build\main.o(t._ZN4mbed8CallbackIFvvEED1Ev) referenced from .\build\serialbase.o(i._ZN4mbed10SerialBaseD1Ev)
 <LI><a href="#[8b]">mbed::Callback&lang;void()&rang;::~Callback()</a> from .\build\main.o(t._ZN4mbed8CallbackIFvvEED1Ev) referenced from .\build\can.o(i._ZN4mbed3CAND1Ev)
 <LI><a href="#[cf]">mbed::FileBase::~FileBase()</a> from .\build\filebase.o(i._ZN4mbed8FileBaseD1Ev) referenced from .\build\filebase.o(.constdata__ZTVN4mbed8FileBaseE)
 <LI><a href="#[d0]">mbed::FileLike::~FileLike__sub_object()</a> from .\build\stream.o(i._ZN4mbed8FileLikeD2Ev) referenced from .\build\stream.o(.constdata__ZTVN4mbed8FileLikeE)
 <LI><a href="#[9c]">CThunk&lang;mbed::SerialBase&rang;::trampoline(mbed::SerialBase*, void*, void(mbed::SerialBase::**)(void*))</a> from .\build\serialbase.o(t._ZN6CThunkIN4mbed10SerialBaseEE10trampolineEPS1_PvPMS1_FvS4_E) referenced from .\build\serialbase.o(t._ZN6CThunkIN4mbed10SerialBaseEE4initEPS1_MS1_FvPvES4_)
 <LI><a href="#[9d]">CThunk&lang;mbed::SPI&rang;::trampoline(mbed::SPI*, void*, void(mbed::SPI::**)(void*))</a> from .\build\spi.o(t._ZN6CThunkIN4mbed3SPIEE10trampolineEPS1_PvPMS1_FvS4_E) referenced from .\build\spi.o(t._ZN6CThunkIN4mbed3SPIEE4initEPS1_MS1_FvPvES4_)
 <LI><a href="#[ca]">thunk{-188} to mbed::Serial::lock()</a> from .\build\serial.o(i._ZThn188_N4mbed6Serial4lockEv) referenced from .\build\serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[c9]">thunk{-188} to mbed::Serial::_getc()</a> from .\build\serial.o(i._ZThn188_N4mbed6Serial5_getcEv) referenced from .\build\serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[c8]">thunk{-188} to mbed::Serial::_putc(int)</a> from .\build\serial.o(i._ZThn188_N4mbed6Serial5_putcEi) referenced from .\build\serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[cb]">thunk{-188} to mbed::Serial::unlock()</a> from .\build\serial.o(i._ZThn188_N4mbed6Serial6unlockEv) referenced from .\build\serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[a6]">__cxa_pure_virtual</a> from D:\KEIL5\ARM\ARMCC\Bin\..\lib\cpplib\cpprt_w.l(pure_virt.o)(i.__cxa_pure_virtual) referenced 6 times from .\build\positionsensor.o(.constdata__ZTV14PositionSensor)
 <LI><a href="#[a6]">__cxa_pure_virtual</a> from D:\KEIL5\ARM\ARMCC\Bin\..\lib\cpplib\cpprt_w.l(pure_virt.o)(i.__cxa_pure_virtual) referenced 4 times from .\build\filehandle.o(.constdata__ZTVN4mbed10FileHandleE)
 <LI><a href="#[a6]">__cxa_pure_virtual</a> from D:\KEIL5\ARM\ARMCC\Bin\..\lib\cpplib\cpprt_w.l(pure_virt.o)(i.__cxa_pure_virtual) referenced 2 times from .\build\stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[a6]">__cxa_pure_virtual</a> from D:\KEIL5\ARM\ARMCC\Bin\..\lib\cpplib\cpprt_w.l(pure_virt.o)(i.__cxa_pure_virtual) referenced 4 times from .\build\stream.o(.constdata__ZTVN4mbed8FileLikeE)
 <LI><a href="#[d9]">__main</a> from D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__main.o)(!!!main) referenced from .\build\startup_stm32f446xx.o(.text)
 <LI><a href="#[d8]">__sti___7_SPI_cpp_ab1f1164</a> from .\build\spi.o(i.__sti___7_SPI_cpp_ab1f1164) referenced from .\build\spi.o(.init_array)
 <LI><a href="#[d7]">__sti___8_main_cpp_prefs</a> from .\build\main.o(i.__sti___8_main_cpp_prefs) referenced from .\build\main.o(.init_array)
 <LI><a href="#[79]">_get_lc_ctype</a> from D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(lc_ctype_c.o)(locale$$code) referenced from D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_ctype_table.o)(.text)
 <LI><a href="#[74]">_printf_input_char</a> from D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_char_common.o)(.text) referenced from D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_char_common.o)(.text)
 <LI><a href="#[77]">_sbackspace</a> from D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_sgetc.o)(.text) referenced from D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(strtod.o)(.text)
 <LI><a href="#[76]">_sgetc</a> from D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_sgetc.o)(.text) referenced from D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(strtod.o)(.text)
 <LI><a href="#[73]">_snputc</a> from D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_snputc.o)(.text) referenced from D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(vsnprintf.o)(.text)
 <LI><a href="#[75]">fputc</a> from D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(fputc.o)(i.fputc) referenced from D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_char_file.o)(.text)
 <LI><a href="#[78]">isspace</a> from D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(isspace.o)(.text) referenced from D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(strtod.o)(.text)
 <LI><a href="#[7a]">timer_irq_handler</a> from .\build\hal_tick_32b.o(i.timer_irq_handler) referenced from .\build\hal_tick_32b.o(i.HAL_InitTick)
 <LI><a href="#[95]">uart1_irq</a> from .\build\serial_device.o(i.uart1_irq) referenced from .\build\serial_device.o(i.serial_irq_set)
 <LI><a href="#[96]">uart2_irq</a> from .\build\serial_device.o(i.uart2_irq) referenced from .\build\serial_device.o(i.serial_irq_set)
 <LI><a href="#[97]">uart3_irq</a> from .\build\serial_device.o(i.uart3_irq) referenced from .\build\serial_device.o(i.serial_irq_set)
 <LI><a href="#[98]">uart4_irq</a> from .\build\serial_device.o(i.uart4_irq) referenced from .\build\serial_device.o(i.serial_irq_set)
 <LI><a href="#[99]">uart5_irq</a> from .\build\serial_device.o(i.uart5_irq) referenced from .\build\serial_device.o(i.serial_irq_set)
 <LI><a href="#[9a]">uart6_irq</a> from .\build\serial_device.o(i.uart6_irq) referenced from .\build\serial_device.o(i.serial_irq_set)
 <LI><a href="#[a1]">us_ticker_clear_interrupt</a> from .\build\us_ticker_32b.o(i.us_ticker_clear_interrupt) referenced from .\build\mbed_us_ticker_api.o(.constdata)
 <LI><a href="#[a0]">us_ticker_disable_interrupt</a> from .\build\us_ticker_32b.o(i.us_ticker_disable_interrupt) referenced from .\build\mbed_us_ticker_api.o(.constdata)
 <LI><a href="#[a3]">us_ticker_fire_interrupt</a> from .\build\us_ticker_32b.o(i.us_ticker_fire_interrupt) referenced from .\build\mbed_us_ticker_api.o(.constdata)
 <LI><a href="#[9e]">us_ticker_init</a> from .\build\us_ticker_32b.o(i.us_ticker_init) referenced from .\build\mbed_us_ticker_api.o(.constdata)
 <LI><a href="#[9f]">us_ticker_read</a> from .\build\us_ticker_32b.o(i.us_ticker_read) referenced from .\build\mbed_us_ticker_api.o(.constdata)
 <LI><a href="#[a2]">us_ticker_set_interrupt</a> from .\build\us_ticker_32b.o(i.us_ticker_set_interrupt) referenced from .\build\mbed_us_ticker_api.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[d9]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__main.o)(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[db]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__scatter.o)(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[dd]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__scatter.o)(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2f3]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__scatter.o)(!!!scatter), UNUSED)

<P><STRONG><a name="[2f4]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__scatter.o)(!!!scatter), UNUSED)

<P><STRONG><a name="[2f5]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__dczerorl2.o)(!!dczerorl2), UNUSED)

<P><STRONG><a name="[2f6]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__dczerorl2.o)(!!dczerorl2), UNUSED)

<P><STRONG><a name="[2f7]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__scatter_zi.o)(!!handler_zi), UNUSED)

<P><STRONG><a name="[de]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_n.o)(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[128]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_percent.o)(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[e0]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_p.o)(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[e2]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_f.o)(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[e4]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_e.o)(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[e5]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_g.o)(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[e6]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_a.o)(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[2f8]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_ll.o)(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[e8]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_i.o)(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[ea]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_d.o)(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[eb]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_u.o)(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[ec]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_o.o)(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[ee]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_x.o)(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[f0]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_lli.o)(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[f2]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_lld.o)(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[f3]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_llu.o)(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[f4]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_llo.o)(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[f6]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_llx.o)(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[2f9]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_l.o)(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[f8]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_c.o)(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[fa]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_s.o)(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[fc]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_lc.o)(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[fe]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_ls.o)(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[2fa]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_percent_end.o)(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[111]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit.o)(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[100]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[102]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[2fb]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[2fc]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[104]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[2fd]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[2fe]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[2ff]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[106]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[300]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[301]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[107]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[302]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[303]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[304]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[305]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[306]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[307]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[308]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[109]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000024))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _sys_open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;PlatformMutex&rang;::get() &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[309]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[30a]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[10b]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[30b]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[30c]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[30d]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[30e]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libinit2.o)(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[dc]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__rtentry.o)(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[30f]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__rtentry2.o)(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[10c]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__rtentry4.o)(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap &rArr; _mbed_user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[310]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(libshutdown2.o)(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[10e]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__rtentry2.o)(.ARM.Collect$$rtentry$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = __rt_entry_postsh_1 &rArr; _platform_post_stackheap_init &rArr; mbed_sdk_init &rArr; SetSysClock &rArr; SetSysClock_PLL_HSE &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_OC_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
</UL>

<P><STRONG><a name="[110]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__rtentry2.o)(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[112]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__rtentry2.o)(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; $Super$$main &rArr; Init_All_HW(GPIOStruct*) &rArr; Init_PWM(GPIOStruct*) &rArr; FastPWM::FastPWM(PinName, int) &rArr; pwmout_init &rArr; pwmout_period_us &rArr; pwmout_write &rArr; error &rArr; exit &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[311]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__rtentry2.o)(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[11]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[312]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(maybetermalloc1.o)(.emb_text), UNUSED)

<P><STRONG><a name="[12]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>I2C4_Error_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>I2C4_Event_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>QuadSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32f446xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[12a]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_errno_addr.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_open_errors(int, unsigned)
</UL>

<P><STRONG><a name="[313]"></a>__errno</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_errno_addr.o)(.text), UNUSED)

<P><STRONG><a name="[314]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_errno_addr.o)(.text), UNUSED)

<P><STRONG><a name="[115]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(h1_alloc.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[118]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(h1_free.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[273]"></a>__aeabi_llsr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(llushr.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastPWM::calcPrescaler(unsigned long long)
</UL>

<P><STRONG><a name="[315]"></a>_ll_ushift_r</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(llushr.o)(.text), UNUSED)

<P><STRONG><a name="[119]"></a>vsnprintf</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(vsnprintf.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vfprintf
</UL>

<P><STRONG><a name="[11c]"></a>__c89vfprintf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(c89vfprintf.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
</UL>

<P><STRONG><a name="[11e]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__2printf.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate(PositionSensor*, GPIOStruct*, ControllerStruct*, PreferenceWriter*)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;order_phases(PositionSensor*, GPIOStruct*, ControllerStruct*, PreferenceWriter*)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_cmd(mbed::CANMessage, ControllerStruct*)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate()
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_torque_mode()
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_setup_state()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_interrupt()
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_menu_state()
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_encoder()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onMsgReceived()
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[120]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_pad.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>

<P><STRONG><a name="[121]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_pad.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>

<P><STRONG><a name="[11f]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_str.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[e9]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_dec.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[125]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_hex_int_ll_ptr.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[ef]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_hex_int_ll_ptr.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[f7]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_hex_int_ll_ptr.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[e1]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_hex_int_ll_ptr.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[126]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__printf_flags_ss_wp.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[129]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(atoi.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_interrupt()
</UL>

<P><STRONG><a name="[12c]"></a>_do_fflush</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(fflush.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
</UL>

<P><STRONG><a name="[12f]"></a>fflush</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(fflush.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::putc(int)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::getc()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[130]"></a>freopen</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(fopen.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = freopen &rArr; _sys_open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;PlatformMutex&rang;::get() &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[133]"></a>fopen</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(fopen.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = fopen &rArr; freopen &rArr; _sys_open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;PlatformMutex&rang;::get() &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_fdopen(mbed::FileHandle*, const char*)
</UL>

<P><STRONG><a name="[135]"></a>setbuf</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(setbuf.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setbuf &rArr; setvbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_set_unbuffered_stream(std::__FILE*)
</UL>

<P><STRONG><a name="[131]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(fclose.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[259]"></a>fclose</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(fclose.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fclose
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::~Stream__sub_object()
</UL>

<P><STRONG><a name="[25c]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(strlen.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
</UL>

<P><STRONG><a name="[25b]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(strncmp.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
</UL>

<P><STRONG><a name="[213]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memcpy_w.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorAM5147::WriteLUT(int*)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[316]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memcpy_w.o)(.text), UNUSED)

<P><STRONG><a name="[317]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memcpy_w.o)(.text), UNUSED)

<P><STRONG><a name="[318]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memcpy_w.o)(.text), UNUSED)

<P><STRONG><a name="[138]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(aeabi_memset.o)(.text))
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_start_asynch_transfer
</UL>

<P><STRONG><a name="[134]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memclr_w.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::SPI(PinName, PinName, PinName, PinName)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::CAN(PinName, PinName, int)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorAM5147::PositionSensorAM5147(int, float, int)
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate(PositionSensor*, GPIOStruct*, ControllerStruct*, PreferenceWriter*)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_prefs
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::DigitalOut(PinName)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Transaction&lang;mbed::SPI&rang;::Transaction()
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[319]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memclr_w.o)(.text), UNUSED)

<P><STRONG><a name="[31a]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memclr_w.o)(.text), UNUSED)

<P><STRONG><a name="[169]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memclr_w.o)(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[297]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(strcmpv7m.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[da]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(init_aeabi.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[231]"></a>__aeabi_vec_dtor</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\cpplib\cpprt_w.l(aeabi_vec_dtor_noexceptions.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_dtor
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::~CAN()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::~SerialBase()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CircularBuffer&lang;mbed::Transaction&lang;mbed::SPI&rang;, (unsigned)2, unsigned&rang;::~CircularBuffer()
</UL>

<P><STRONG><a name="[116]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_heap_descriptor.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[31b]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(hguard.o)(.text), UNUSED)

<P><STRONG><a name="[31c]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(hguard.o)(.text), UNUSED)

<P><STRONG><a name="[c]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(init_alloc.o)(.text), UNUSED)

<P><STRONG><a name="[8]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(init_alloc.o)(.text), UNUSED)

<P><STRONG><a name="[117]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(init_alloc.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_expand
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[13c]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(init_alloc.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[103]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(init_alloc.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_expand
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_escrow
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[13f]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(h1_init.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[7]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(h1_init.o)(.text), UNUSED)

<P><STRONG><a name="[140]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_rserrno.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __read_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>

<P><STRONG><a name="[141]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_rserrno.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmodf
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[122]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_truncate.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[123]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_truncate.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[124]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_intcommon.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[df]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_charcount.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[31d]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_fp_dec.o)(.text), UNUSED)

<P><STRONG><a name="[148]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_fp_dec.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[11a]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_char_common.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>

<P><STRONG><a name="[11b]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_sputc.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>

<P><STRONG><a name="[73]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_snputc.o)(.text))
<BR>[Address Reference Count : 1]<UL><LI> vsnprintf.o(.text)
</UL>
<P><STRONG><a name="[14b]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_char.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[f9]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_char.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[fb]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_char.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[11d]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_char_file.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vfprintf
</UL>

<P><STRONG><a name="[14d]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_wctomb.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[f1]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_longlong_dec.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[14f]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_oct_int_ll.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[ed]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_oct_int_ll.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[f5]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_oct_int_ll.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[76]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_sgetc.o)(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[77]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_sgetc.o)(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[152]"></a>__strtod_int</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(strtod.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>

<P><STRONG><a name="[12b]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(strtol.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[14c]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(ferror.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[155]"></a>_readbuf</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(filbuf.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[15c]"></a>_seteof</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(filbuf.o)(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[158]"></a>__filbuf</STRONG> (Thumb, 476 bytes, Stack size 32 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(filbuf.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seteof
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
</UL>

<P><STRONG><a name="[2a7]"></a>__filbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(filbuf.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __filbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[31e]"></a>__filbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(filbuf.o)(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>__flsbuf</STRONG> (Thumb, 470 bytes, Stack size 32 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(flsbuf.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
</UL>

<P><STRONG><a name="[2a8]"></a>__flsbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(flsbuf.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[31f]"></a>__flsbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(flsbuf.o)(.text), UNUSED)

<P><STRONG><a name="[12e]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(fseek.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _fseek &rArr; _sys_istty
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>

<P><STRONG><a name="[320]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(fseek.o)(.text), UNUSED)

<P><STRONG><a name="[136]"></a>setvbuf</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(setvbuf.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setbuf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[157]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(stdio.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>

<P><STRONG><a name="[160]"></a>_writebuf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(stdio.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[12d]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(stdio.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[159]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(stdio.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[10a]"></a>_initio</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(initio.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = _initio &rArr; freopen &rArr; _sys_open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;PlatformMutex&rang;::get() &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[164]"></a>_terminateio</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(initio.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[165]"></a>__rt_SIGPVFN</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(defsig_pvfn_outer.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[321]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memclr.o)(.text), UNUSED)

<P><STRONG><a name="[168]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memclr.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[139]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_memclr.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[153]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_ctype_table.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[105]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(rt_locale.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[13b]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(h1_extend.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[147]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(lludiv10.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[78]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(isspace.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[16a]"></a>_printf_fp_hex_real</STRONG> (Thumb, 754 bytes, Stack size 72 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_fp_hex.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[14a]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_fp_infnan.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>

<P><STRONG><a name="[16b]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_wchar.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[fd]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_wchar.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[ff]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_wchar.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[173]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_chval.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[16f]"></a>_scanf_really_real</STRONG> (Thumb, 668 bytes, Stack size 120 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(scanf_fp.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>

<P><STRONG><a name="[154]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_strtoul.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[143]"></a>_btod_etento</STRONG> (Thumb, 216 bytes, Stack size 72 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(bigflt0.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[161]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(ftell.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[322]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(ftell.o)(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>_flushlinebuffered</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(flushlinebuffered.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[14e]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_wcrtomb.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[167]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(defsig_exit.o)(.text))
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>

<P><STRONG><a name="[163]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(defsig_rtred_outer.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[13d]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(defsig_rtmem_outer.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[166]"></a>__rt_SIGPVFN_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(defsig_pvfn_inner.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>

<P><STRONG><a name="[13e]"></a>__rt_heap_escrow</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(heapauxa.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[13a]"></a>__rt_heap_expand</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(heapauxa.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __rt_heap_expand
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[174]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(sys_exit.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[177]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(defsig_general.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
</UL>

<P><STRONG><a name="[175]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(defsig_rtred_inner.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[176]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(defsig_rtmem_inner.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[178]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(sys_wrch.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[323]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(use_no_semi.o)(.text), UNUSED)

<P><STRONG><a name="[324]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(use_no_semi.o)(.text), UNUSED)

<P><STRONG><a name="[325]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 80 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(indicate_semi.o)(.text), UNUSED)

<P><STRONG><a name="[179]"></a>_scanf_really_hex_real</STRONG> (Thumb, 778 bytes, Stack size 80 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(scanf_hexfp.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _scanf_really_hex_real &rArr; __support_ldexp &rArr; __hardfp_ldexp &rArr; __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
</UL>

<P><STRONG><a name="[2f2]"></a>_scanf_really_infnan</STRONG> (Thumb, 292 bytes, Stack size 72 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(scanf_infnan.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
</UL>

<P><STRONG><a name="[17a]"></a>__aeabi_llsl</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(llshl.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[326]"></a>_ll_shift_l</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(llshl.o)(.text), UNUSED)

<P><STRONG><a name="[144]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[17d]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[17c]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[180]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[17e]"></a>_e2d</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_e2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
</UL>

<P><STRONG><a name="[17f]"></a>_e2e</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>

<P><STRONG><a name="[145]"></a>_btod_ediv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[16e]"></a>_btod_edivd</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_edivd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _btod_edivd &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[146]"></a>_btod_emul</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[16d]"></a>_btod_emuld</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_emuld))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _btod_emuld &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[181]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(btod.o)(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[113]"></a>main</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\mbed_sdk_boot.o(i.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224 + Unknown Stack Size
<LI>Call Chain = main &rArr; $Super$$main &rArr; Init_All_HW(GPIOStruct*) &rArr; Init_PWM(GPIOStruct*) &rArr; FastPWM::FastPWM(PinName, int) &rArr; pwmout_init &rArr; pwmout_period_us &rArr; pwmout_write &rArr; error &rArr; exit &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_main
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[2f]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\can_api.o(i.CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CAN1_RX0_IRQHandler &rArr; can_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_irq
</UL>
<BR>[Address Reference Count : 2]<UL><LI> can_api.o(i.can_irq_set)
<LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\can_api.o(i.CAN1_SCE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CAN1_SCE_IRQHandler &rArr; can_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_irq
</UL>
<BR>[Address Reference Count : 2]<UL><LI> can_api.o(i.can_irq_set)
<LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\can_api.o(i.CAN1_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CAN1_TX_IRQHandler &rArr; can_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_irq
</UL>
<BR>[Address Reference Count : 2]<UL><LI> can_api.o(i.can_irq_set)
<LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\can_api.o(i.CAN2_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CAN2_RX0_IRQHandler &rArr; can_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_irq
</UL>
<BR>[Address Reference Count : 2]<UL><LI> can_api.o(i.can_irq_set)
<LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\can_api.o(i.CAN2_SCE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CAN2_SCE_IRQHandler &rArr; can_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_irq
</UL>
<BR>[Address Reference Count : 2]<UL><LI> can_api.o(i.can_irq_set)
<LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\can_api.o(i.CAN2_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CAN2_TX_IRQHandler &rArr; can_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_irq
</UL>
<BR>[Address Reference Count : 2]<UL><LI> can_api.o(i.can_irq_set)
<LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[20a]"></a>FLASH_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\stm32f4xx_flash.o(i.FLASH_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriter::open()
</UL>

<P><STRONG><a name="[186]"></a>FLASH_EraseSector</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, .\build\stm32f4xx_flash.o(i.FLASH_EraseSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_EraseSector &rArr; FLASH_WaitForLastOperation2
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation2
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriter::open()
</UL>

<P><STRONG><a name="[189]"></a>FLASH_GetStatus</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, .\build\stm32f4xx_flash.o(i.FLASH_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation2
</UL>

<P><STRONG><a name="[20c]"></a>FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\stm32f4xx_flash.o(i.FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriter::close()
</UL>

<P><STRONG><a name="[188]"></a>FLASH_ProgramWord</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, .\build\stm32f4xx_flash.o(i.FLASH_ProgramWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation2
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation2
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriter::write(unsigned, int)
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriter::write(unsigned, float)
</UL>

<P><STRONG><a name="[209]"></a>FLASH_Unlock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, .\build\stm32f4xx_flash.o(i.FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriter::open()
</UL>

<P><STRONG><a name="[187]"></a>FLASH_WaitForLastOperation2</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, .\build\stm32f4xx_flash.o(i.FLASH_WaitForLastOperation2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_WaitForLastOperation2
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
</UL>

<P><STRONG><a name="[29a]"></a>HAL_CAN_ConfigFilter</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, .\build\stm32f4xx_hal_can.o(i.HAL_CAN_ConfigFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_CAN_ConfigFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_filter
</UL>

<P><STRONG><a name="[18a]"></a>HAL_CAN_Init</STRONG> (Thumb, 444 bytes, Stack size 16 bytes, .\build\stm32f4xx_hal_can.o(i.HAL_CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_CAN_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_registers_init
</UL>

<P><STRONG><a name="[18b]"></a>HAL_CAN_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\stm32f4xx_hal_can.o(i.HAL_CAN_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
</UL>

<P><STRONG><a name="[19c]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, .\build\stm32f4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
</UL>

<P><STRONG><a name="[18c]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_frequency
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitTXEFlagStateUntilTimeout
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseTx_ISR
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>

<P><STRONG><a name="[2d4]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_irq_handler
</UL>

<P><STRONG><a name="[18d]"></a>HAL_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, .\build\stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_TIM_OC_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
</UL>

<P><STRONG><a name="[18e]"></a>HAL_InitTick</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, .\build\hal_tick_32b.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_TIM_OC_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[18f]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\stm32f4xx_hal.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[194]"></a>HAL_PWREx_EnableOverDrive</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, .\build\stm32f4xx_hal_pwr_ex.o(i.HAL_PWREx_EnableOverDrive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PWREx_EnableOverDrive
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock_PLL_HSE
</UL>

<P><STRONG><a name="[195]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 1760 bytes, Stack size 48 bytes, .\build\stm32f4xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock_PLL_HSE
</UL>

<P><STRONG><a name="[196]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 446 bytes, Stack size 16 bytes, .\build\stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_OC_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock_PLL_HSE
</UL>

<P><STRONG><a name="[190]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, .\build\stm32f4xx_hal_rcc.o(i.HAL_RCC_GetClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_period_us
</UL>

<P><STRONG><a name="[198]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\stm32f4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>

<P><STRONG><a name="[191]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, .\build\stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_frequency
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_period_us
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_get_clock_freq
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[199]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, .\build\stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_period_us
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_get_clock_freq
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[197]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 296 bytes, Stack size 20 bytes, .\build\stm32f4xx_hal_rcc_ex.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[19a]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1164 bytes, Stack size 16 bytes, .\build\stm32f4xx_hal_rcc_ex.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock_PLL_HSE
</UL>

<P><STRONG><a name="[19d]"></a>HAL_SPI_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\stm32f4xx_hal_spi.o(i.HAL_SPI_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAAbortOnError
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseTx_ISR
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRx_ISR
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
</UL>

<P><STRONG><a name="[19b]"></a>HAL_SPI_IRQHandler</STRONG> (Thumb, 308 bytes, Stack size 24 bytes, .\build\stm32f4xx_hal_spi.o(i.HAL_SPI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SPI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_irq_handler_asynch
</UL>

<P><STRONG><a name="[19e]"></a>HAL_SPI_Init</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, .\build\stm32f4xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_spi
</UL>

<P><STRONG><a name="[19f]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\stm32f4xx_hal_spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[1a0]"></a>HAL_SPI_Receive_IT</STRONG> (Thumb, 232 bytes, Stack size 20 bytes, .\build\stm32f4xx_hal_spi.o(i.HAL_SPI_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_SPI_Receive_IT &rArr; HAL_SPI_TransmitReceive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_start_asynch_transfer
</UL>

<P><STRONG><a name="[1bd]"></a>HAL_SPI_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\stm32f4xx_hal_spi.o(i.HAL_SPI_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRx_ISR
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
</UL>

<P><STRONG><a name="[1a2]"></a>HAL_SPI_Transmit</STRONG> (Thumb, 474 bytes, Stack size 32 bytes, .\build\stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_SPI_Transmit &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitTXEFlagStateUntilTimeout
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CheckFlag_BSY
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_write
</UL>

<P><STRONG><a name="[1a1]"></a>HAL_SPI_TransmitReceive_IT</STRONG> (Thumb, 230 bytes, Stack size 20 bytes, .\build\stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_SPI_TransmitReceive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive_IT
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_start_asynch_transfer
</UL>

<P><STRONG><a name="[2cc]"></a>HAL_SPI_Transmit_IT</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, .\build\stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_SPI_Transmit_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_start_asynch_transfer
</UL>

<P><STRONG><a name="[1c1]"></a>HAL_SPI_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\stm32f4xx_hal_spi.o(i.HAL_SPI_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseTx_ISR
</UL>

<P><STRONG><a name="[1be]"></a>HAL_SPI_TxRxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\stm32f4xx_hal_spi.o(i.HAL_SPI_TxRxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
</UL>

<P><STRONG><a name="[1a5]"></a>HAL_TIMEx_PWMN_Start</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, .\build\stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_PWMN_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIMEx_PWMN_Start &rArr; TIM_CCxNChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_write
</UL>

<P><STRONG><a name="[192]"></a>HAL_TIM_OC_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, .\build\stm32f4xx_hal_tim.o(i.HAL_TIM_OC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_OC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_MspInit
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[1a7]"></a>HAL_TIM_OC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\stm32f4xx_hal_tim.o(i.HAL_TIM_OC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
</UL>

<P><STRONG><a name="[193]"></a>HAL_TIM_OC_Start</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, .\build\stm32f4xx_hal_tim.o(i.HAL_TIM_OC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_OC_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[1aa]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, .\build\stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC2_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_write
</UL>

<P><STRONG><a name="[1af]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, .\build\stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_PWM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_period_us
</UL>

<P><STRONG><a name="[1b0]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[1b1]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, .\build\stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_write
</UL>

<P><STRONG><a name="[1b5]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, .\build\serial_device.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[1b2]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 326 bytes, Stack size 32 bytes, .\build\stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_handler_asynch
</UL>

<P><STRONG><a name="[1b8]"></a>HAL_UART_Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, .\build\stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart
</UL>

<P><STRONG><a name="[1b9]"></a>HAL_UART_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\stm32f4xx_hal_uart.o(i.HAL_UART_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1ce]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\stm32f4xx_hal_uart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[1cd]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\build\serial_device.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
</UL>

<P><STRONG><a name="[1c2]"></a>SetSysClock</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\system_clock.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = SetSysClock &rArr; SetSysClock_PLL_HSE &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_OC_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock_PLL_HSE
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
</UL>

<P><STRONG><a name="[1c3]"></a>SetSysClock_PLL_HSE</STRONG> (Thumb, 212 bytes, Stack size 176 bytes, .\build\system_clock.o(i.SetSysClock_PLL_HSE))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = SetSysClock_PLL_HSE &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_OC_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[1c4]"></a>Set_GPIO_Clock</STRONG> (Thumb, 326 bytes, Stack size 16 bytes, .\build\gpio_api.o(i.Set_GPIO_Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = Set_GPIO_Clock &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[2b9]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, .\build\system_stm32f4xx.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
</UL>

<P><STRONG><a name="[71]"></a>SystemInit</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, .\build\system_clock.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(.text)
</UL>
<P><STRONG><a name="[34]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 368 bytes, Stack size 8 bytes, .\build\main.o(i.TIM1_UP_TIM10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = TIM1_UP_TIM10_IRQHandler &rArr; calibrate() &rArr; calibrate(PositionSensor*, GPIOStruct*, ControllerStruct*, PreferenceWriter*) &rArr; operator new[] (unsigned) &rArr; error &rArr; exit &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorAM5147::Sample(float)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorAM5147::GetMechVelocity()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorAM5147::GetMechPosition()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorAM5147::GetElecVelocity()
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorAM5147::GetElecPosition()
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commutate(ControllerStruct*, ObserverStruct*, GPIOStruct*, float)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;torque_control(ControllerStruct*)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate()
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_torque_mode()
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_setup_state()
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_menu_state()
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_encoder()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f446xx.o(RESET)
</UL>
<P><STRONG><a name="[1a8]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 184 bytes, Stack size 0 bytes, .\build\stm32f4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[1a9]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, .\build\stm32f4xx_hal_tim.o(i.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
</UL>

<P><STRONG><a name="[1ac]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, .\build\stm32f4xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[26d]"></a>getChannel(TIM_TypeDef*, PinName)</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, .\FastPWM.lib(fastpwm_stm_tim_pinout.o)(i._Z10getChannelP11TIM_TypeDef7PinName))
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastPWM::initFastPWM()
</UL>

<P><STRONG><a name="[1cf]"></a>limit_norm(float*, float*, float)</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, .\build\math_ops.o(i._Z10limit_normPfS_f))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = limit_norm(float*, float*, float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commutate(ControllerStruct*, ObserverStruct*, GPIOStruct*, float)
</UL>

<P><STRONG><a name="[1d1]"></a>pack_reply(mbed::CANMessage*, float, float, float)</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, .\build\can_com.o(i._Z10pack_replyPN4mbed10CANMessageEfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pack_reply(mbed::CANMessage*, float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_uint(float, float, float, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onMsgReceived()
</UL>

<P><STRONG><a name="[1d3]"></a>unpack_cmd(mbed::CANMessage, ControllerStruct*)</STRONG> (Thumb, 340 bytes, Stack size 136 bytes, .\build\can_com.o(i._Z10unpack_cmdN4mbed10CANMessageEP16ControllerStruct))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = unpack_cmd(mbed::CANMessage, ControllerStruct*) &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint_to_float(int, float, float, int)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onMsgReceived()
</UL>

<P><STRONG><a name="[1d6]"></a>Init_All_HW(GPIOStruct*)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, .\build\hw_setup.o(i._Z11Init_All_HWP10GPIOStruct))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = Init_All_HW(GPIOStruct*) &rArr; Init_PWM(GPIOStruct*) &rArr; FastPWM::FastPWM(PinName, int) &rArr; pwmout_init &rArr; pwmout_period_us &rArr; pwmout_write &rArr; error &rArr; exit &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::DigitalOut(PinName)
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_PWM(GPIOStruct*)
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ADC()
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[20f]"></a>flashReadInt(unsigned, unsigned)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\flashwriter.o(i._Z12flashReadIntjj))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreferenceWriter::load()
</UL>

<P><STRONG><a name="[1de]"></a>order_phases(PositionSensor*, GPIOStruct*, ControllerStruct*, PreferenceWriter*)</STRONG> (Thumb, 878 bytes, Stack size 128 bytes, .\build\calibration.o(i._Z12order_phasesP14PositionSensorP10GPIOStructP16ControllerStructP16PreferenceWriter))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = order_phases(PositionSensor*, GPIOStruct*, ControllerStruct*, PreferenceWriter*) &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sqrt(float)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::pow(float, int)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svm(float, float, float, float, float*, float*, float*)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dq0(float, float, float, float, float*, float*)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abc(float, float, float, float*, float*, float*)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate()
</UL>

<P><STRONG><a name="[1e5]"></a>zero_current(int*, int*)</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, .\build\foc.o(i._Z12zero_currentPiS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = zero_current(int*, int*) &rArr; wait &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr; schedule_interrupt &rArr; update_present_time &rArr; convert_timestamp
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1d2]"></a>float_to_uint(float, float, float, int)</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, .\build\math_ops.o(i._Z13float_to_uintfffi))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_reply(mbed::CANMessage*, float, float, float)
</UL>

<P><STRONG><a name="[207]"></a>linearize_dtc(float*)</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, .\build\foc.o(i._Z13linearize_dtcPf))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commutate(ControllerStruct*, ObserverStruct*, GPIOStruct*, float)
</UL>

<P><STRONG><a name="[93]"></a>onMsgReceived()</STRONG> (Thumb, 552 bytes, Stack size 8 bytes, .\build\main.o(i._Z13onMsgReceivedv))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = onMsgReceived() &rArr; unpack_cmd(mbed::CANMessage, ControllerStruct*) &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::write(int)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::write(mbed::CANMessage)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::read(mbed::CANMessage&, int)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorAM5147::ZeroPosition()
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_cmd(mbed::CANMessage, ControllerStruct*)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_reply(mbed::CANMessage*, float, float, float)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[1cc]"></a>print_encoder()</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, .\build\main.o(i._Z13print_encoderv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = print_encoder() &rArr; wait &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr; schedule_interrupt &rArr; update_present_time &rArr; convert_timestamp
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorAM5147::GetMechPosition()
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorAM5147::GetElecPosition()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorAM5147::GetRawPosition()
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
</UL>

<P><STRONG><a name="[1d4]"></a>uint_to_float(int, float, float, int)</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, .\build\math_ops.o(i._Z13uint_to_floatiffi))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_cmd(mbed::CANMessage, ControllerStruct*)
</UL>

<P><STRONG><a name="[210]"></a>flashReadFloat(unsigned, unsigned)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\flashwriter.o(i._Z14flashReadFloatjj))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreferenceWriter::load()
</UL>

<P><STRONG><a name="[2b2]"></a>reset_observer(ObserverStruct*)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\foc.o(i._Z14reset_observerP14ObserverStruct))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1c9]"></a>torque_control(ControllerStruct*)</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, .\build\foc.o(i._Z14torque_controlP16ControllerStruct))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
</UL>

<P><STRONG><a name="[1c6]"></a>enter_menu_state()</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, .\build\main.o(i._Z16enter_menu_statev))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = enter_menu_state() &rArr; DRV832x::disable_gd() &rArr; DRV832x::write_register(int, int) &rArr; DRV832x::spi_write(unsigned short) &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr; schedule_interrupt &rArr; update_present_time &rArr; convert_timestamp
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::write(int)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV832x::disable_gd()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
</UL>

<P><STRONG><a name="[94]"></a>serial_interrupt()</STRONG> (Thumb, 760 bytes, Stack size 24 bytes, .\build\main.o(i._Z16serial_interruptv))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = serial_interrupt() &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::write(int)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::putc(int)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::getc()
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::readable()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorAM5147::Sample(float)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorAM5147::GetMechPosition()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorAM5147::SetMechOffset(float)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreferenceWriter::ready()
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreferenceWriter::flush()
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreferenceWriter::close()
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreferenceWriter::open()
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreferenceWriter::load()
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fminf(float, float)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmaxf(float, float)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[1cb]"></a>enter_setup_state()</STRONG> (Thumb, 294 bytes, Stack size 32 bytes, .\build\main.o(i._Z17enter_setup_statev))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = enter_setup_state() &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
</UL>

<P><STRONG><a name="[1c8]"></a>enter_torque_mode()</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, .\build\main.o(i._Z17enter_torque_modev))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = enter_torque_mode() &rArr; DRV832x::enable_gd() &rArr; DRV832x::write_register(int, int) &rArr; DRV832x::spi_write(unsigned short) &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr; schedule_interrupt &rArr; update_present_time &rArr; convert_timestamp
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::write(int)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV832x::enable_gd()
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_foc(ControllerStruct*)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
</UL>

<P><STRONG><a name="[2b5]"></a>init_controller_params(ControllerStruct*)</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, .\build\foc.o(i._Z22init_controller_paramsP16ControllerStruct))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1df]"></a>abc(float, float, float, float*, float*, float*)</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, .\build\foc.o(i._Z3abcfffPfS_S_))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = abc(float, float, float, float*, float*, float*) &rArr; FastMath::FastCos(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastMath::FastSin(float)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastMath::FastCos(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commutate(ControllerStruct*, ObserverStruct*, GPIOStruct*, float)
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate(PositionSensor*, GPIOStruct*, ControllerStruct*, PreferenceWriter*)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;order_phases(PositionSensor*, GPIOStruct*, ControllerStruct*, PreferenceWriter*)
</UL>

<P><STRONG><a name="[1e2]"></a>dq0(float, float, float, float, float*, float*)</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, .\build\foc.o(i._Z3dq0ffffPfS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = dq0(float, float, float, float, float*, float*) &rArr; FastMath::FastCos(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastMath::FastSin(float)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastMath::FastCos(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commutate(ControllerStruct*, ObserverStruct*, GPIOStruct*, float)
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate(PositionSensor*, GPIOStruct*, ControllerStruct*, PreferenceWriter*)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;order_phases(PositionSensor*, GPIOStruct*, ControllerStruct*, PreferenceWriter*)
</UL>

<P><STRONG><a name="[1e0]"></a>svm(float, float, float, float, float*, float*, float*)</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, .\build\foc.o(i._Z3svmffffPfS_S_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svm(float, float, float, float, float*, float*, float*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fminf3(float, float, float)
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmaxf3(float, float, float)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fminf(float, float)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmaxf(float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commutate(ControllerStruct*, ObserverStruct*, GPIOStruct*, float)
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate(PositionSensor*, GPIOStruct*, ControllerStruct*, PreferenceWriter*)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;order_phases(PositionSensor*, GPIOStruct*, ControllerStruct*, PreferenceWriter*)
</UL>

<P><STRONG><a name="[1f4]"></a>fmaxf(float, float)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\math_ops.o(i._Z5fmaxfff))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svm(float, float, float, float, float*, float*, float*)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commutate(ControllerStruct*, ObserverStruct*, GPIOStruct*, float)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_interrupt()
</UL>

<P><STRONG><a name="[1f3]"></a>fminf(float, float)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\math_ops.o(i._Z5fminfff))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svm(float, float, float, float, float*, float*, float*)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commutate(ControllerStruct*, ObserverStruct*, GPIOStruct*, float)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_interrupt()
</UL>

<P><STRONG><a name="[1fd]"></a>fmaxf3(float, float, float)</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, .\build\math_ops.o(i._Z6fmaxf3fff))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svm(float, float, float, float, float*, float*, float*)
</UL>

<P><STRONG><a name="[1fc]"></a>fminf3(float, float, float)</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, .\build\math_ops.o(i._Z6fminf3fff))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svm(float, float, float, float, float*, float*, float*)
</UL>

<P><STRONG><a name="[1d8]"></a>Init_ADC()</STRONG> (Thumb, 194 bytes, Stack size 0 bytes, .\build\hw_setup.o(i._Z8Init_ADCv))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_All_HW(GPIOStruct*)
</UL>

<P><STRONG><a name="[1d7]"></a>Init_PWM(GPIOStruct*)</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, .\build\hw_setup.o(i._Z8Init_PWMP10GPIOStruct))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = Init_PWM(GPIOStruct*) &rArr; FastPWM::FastPWM(PinName, int) &rArr; pwmout_init &rArr; pwmout_period_us &rArr; pwmout_write &rArr; error &rArr; exit &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::DigitalOut(PinName)
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastPWM::FastPWM(PinName, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_All_HW(GPIOStruct*)
</UL>

<P><STRONG><a name="[1ff]"></a>calibrate(PositionSensor*, GPIOStruct*, ControllerStruct*, PreferenceWriter*)</STRONG> (Thumb, 2116 bytes, Stack size 200 bytes, .\build\calibration.o(i._Z9calibrateP14PositionSensorP10GPIOStructP16ControllerStructP16PreferenceWriter))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = calibrate(PositionSensor*, GPIOStruct*, ControllerStruct*, PreferenceWriter*) &rArr; operator new[] (unsigned) &rArr; error &rArr; exit &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sqrt(float)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::pow(float, int)
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svm(float, float, float, float, float*, float*, float*)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dq0(float, float, float, float, float*, float*)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abc(float, float, float, float*, float*, float*)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreferenceWriter::ready()
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreferenceWriter::flush()
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreferenceWriter::close()
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreferenceWriter::open()
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmodf
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate()
</UL>

<P><STRONG><a name="[1c7]"></a>calibrate()</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, .\build\main.o(i._Z9calibratev))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = calibrate() &rArr; calibrate(PositionSensor*, GPIOStruct*, ControllerStruct*, PreferenceWriter*) &rArr; operator new[] (unsigned) &rArr; error &rArr; exit &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::write(int)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV832x::enable_gd()
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV832x::disable_gd()
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate(PositionSensor*, GPIOStruct*, ControllerStruct*, PreferenceWriter*)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;order_phases(PositionSensor*, GPIOStruct*, ControllerStruct*, PreferenceWriter*)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
</UL>

<P><STRONG><a name="[1ca]"></a>commutate(ControllerStruct*, ObserverStruct*, GPIOStruct*, float)</STRONG> (Thumb, 1552 bytes, Stack size 80 bytes, .\build\foc.o(i._Z9commutateP16ControllerStructP14ObserverStructP10GPIOStructf))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = commutate(ControllerStruct*, ObserverStruct*, GPIOStruct*, float) &rArr; limit_norm(float*, float*, float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastMath::FastSin(float)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastMath::FastCos(float)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svm(float, float, float, float, float*, float*, float*)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dq0(float, float, float, float, float*, float*)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abc(float, float, float, float*, float*, float*)
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_norm(float*, float*, float)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fminf(float, float)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmaxf(float, float)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linearize_dtc(float*)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
</UL>

<P><STRONG><a name="[1f8]"></a>reset_foc(ControllerStruct*)</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, .\build\foc.o(i._Z9reset_focP16ControllerStruct))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_torque_mode()
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[208]"></a>FlashWriter::open()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, .\build\flashwriter.o(i._ZN11FlashWriter4openEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FlashWriter::open() &rArr; FLASH_EraseSector &rArr; FLASH_WaitForLastOperation2
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreferenceWriter::open()
</UL>

<P><STRONG><a name="[20b]"></a>FlashWriter::close()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\flashwriter.o(i._ZN11FlashWriter5closeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FlashWriter::close()
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreferenceWriter::close()
</UL>

<P><STRONG><a name="[20d]"></a>FlashWriter::write(unsigned, float)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, .\build\flashwriter.o(i._ZN11FlashWriter5writeEjf))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = FlashWriter::write(unsigned, float) &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation2
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreferenceWriter::flush()
</UL>

<P><STRONG><a name="[20e]"></a>FlashWriter::write(unsigned, int)</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, .\build\flashwriter.o(i._ZN11FlashWriter5writeEji))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = FlashWriter::write(unsigned, int) &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation2
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreferenceWriter::flush()
</UL>

<P><STRONG><a name="[212]"></a>FlashWriter::FlashWriter(int)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\build\flashwriter.o(i._ZN11FlashWriterC1Ei))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreferenceWriter::PreferenceWriter(unsigned)
</UL>

<P><STRONG><a name="[327]"></a>FlashWriter::FlashWriter__sub_object(int)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\flashwriter.o(i._ZN11FlashWriterC1Ei), UNUSED)

<P><STRONG><a name="[242]"></a>PlatformMutex::PlatformMutex()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\busin.o(i._ZN13PlatformMutexC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, const char*, int)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::CAN(PinName, PinName, int)
</UL>

<P><STRONG><a name="[328]"></a>PlatformMutex::PlatformMutex__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\busin.o(i._ZN13PlatformMutexC1Ev), UNUSED)

<P><STRONG><a name="[a7]"></a>PositionSensor::GetMechPositionFixed()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\positionsensor.o(i._ZN14PositionSensor20GetMechPositionFixedEv))
<BR>[Address Reference Count : 1]<UL><LI> positionsensor.o(.constdata__ZTV14PositionSensor)
</UL>
<P><STRONG><a name="[215]"></a>PositionSensor::PositionSensor__sub_object()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\positionsensor.o(i._ZN14PositionSensorC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorAM5147::PositionSensorAM5147(int, float, int)
</UL>

<P><STRONG><a name="[1f0]"></a>PreferenceWriter::load()</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, .\build\prefrencewriter.o(i._ZN16PreferenceWriter4loadEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PreferenceWriter::load()
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashReadFloat(unsigned, unsigned)
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashReadInt(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_interrupt()
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1ed]"></a>PreferenceWriter::open()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\build\prefrencewriter.o(i._ZN16PreferenceWriter4openEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PreferenceWriter::open() &rArr; FlashWriter::open() &rArr; FLASH_EraseSector &rArr; FLASH_WaitForLastOperation2
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriter::open()
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate(PositionSensor*, GPIOStruct*, ControllerStruct*, PreferenceWriter*)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_interrupt()
</UL>

<P><STRONG><a name="[1ef]"></a>PreferenceWriter::close()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\build\prefrencewriter.o(i._ZN16PreferenceWriter5closeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PreferenceWriter::close() &rArr; FlashWriter::close()
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriter::close()
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate(PositionSensor*, GPIOStruct*, ControllerStruct*, PreferenceWriter*)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_interrupt()
</UL>

<P><STRONG><a name="[1ee]"></a>PreferenceWriter::flush()</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, .\build\prefrencewriter.o(i._ZN16PreferenceWriter5flushEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = PreferenceWriter::flush() &rArr; FlashWriter::write(unsigned, int) &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation2
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriter::write(unsigned, int)
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriter::write(unsigned, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate(PositionSensor*, GPIOStruct*, ControllerStruct*, PreferenceWriter*)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_interrupt()
</UL>

<P><STRONG><a name="[1ec]"></a>PreferenceWriter::ready()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\prefrencewriter.o(i._ZN16PreferenceWriter5readyEv))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate(PositionSensor*, GPIOStruct*, ControllerStruct*, PreferenceWriter*)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_interrupt()
</UL>

<P><STRONG><a name="[211]"></a>PreferenceWriter::PreferenceWriter(unsigned)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, .\build\prefrencewriter.o(i._ZN16PreferenceWriterC1Ej))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = PreferenceWriter::PreferenceWriter(unsigned) &rArr; operator new(unsigned) &rArr; error &rArr; exit &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriter::FlashWriter(int)
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_prefs
</UL>

<P><STRONG><a name="[329]"></a>PreferenceWriter::PreferenceWriter__sub_object(unsigned)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, .\build\prefrencewriter.o(i._ZN16PreferenceWriterC1Ej), UNUSED)

<P><STRONG><a name="[ae]"></a>PositionSensorAM5147::ZeroPosition()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, .\build\positionsensor.o(i._ZN20PositionSensorAM514712ZeroPositionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PositionSensorAM5147::ZeroPosition()
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onMsgReceived()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> positionsensor.o(.constdata__ZTV20PositionSensorAM5147)
</UL>
<P><STRONG><a name="[b0]"></a>PositionSensorAM5147::SetElecOffset(float)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\positionsensor.o(i._ZN20PositionSensorAM514713SetElecOffsetEf))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> positionsensor.o(.constdata__ZTV20PositionSensorAM5147)
</UL>
<P><STRONG><a name="[b3]"></a>PositionSensorAM5147::SetMechOffset(float)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\positionsensor.o(i._ZN20PositionSensorAM514713SetMechOffsetEf))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_interrupt()
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> positionsensor.o(.constdata__ZTV20PositionSensorAM5147)
</UL>
<P><STRONG><a name="[af]"></a>PositionSensorAM5147::GetRawPosition()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\positionsensor.o(i._ZN20PositionSensorAM514714GetRawPositionEv))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_encoder()
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> positionsensor.o(.constdata__ZTV20PositionSensorAM5147)
</UL>
<P><STRONG><a name="[ab]"></a>PositionSensorAM5147::GetElecPosition()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\positionsensor.o(i._ZN20PositionSensorAM514715GetElecPositionEv))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_encoder()
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> positionsensor.o(.constdata__ZTV20PositionSensorAM5147)
</UL>
<P><STRONG><a name="[ad]"></a>PositionSensorAM5147::GetElecVelocity()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\positionsensor.o(i._ZN20PositionSensorAM514715GetElecVelocityEv))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> positionsensor.o(.constdata__ZTV20PositionSensorAM5147)
</UL>
<P><STRONG><a name="[a9]"></a>PositionSensorAM5147::GetMechPosition()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\positionsensor.o(i._ZN20PositionSensorAM514715GetMechPositionEv))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_interrupt()
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_encoder()
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> positionsensor.o(.constdata__ZTV20PositionSensorAM5147)
</UL>
<P><STRONG><a name="[ac]"></a>PositionSensorAM5147::GetMechVelocity()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\positionsensor.o(i._ZN20PositionSensorAM514715GetMechVelocityEv))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> positionsensor.o(.constdata__ZTV20PositionSensorAM5147)
</UL>
<P><STRONG><a name="[aa]"></a>PositionSensorAM5147::GetMechPositionFixed()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\positionsensor.o(i._ZN20PositionSensorAM514720GetMechPositionFixedEv))
<BR>[Address Reference Count : 1]<UL><LI> positionsensor.o(.constdata__ZTV20PositionSensorAM5147)
</UL>
<P><STRONG><a name="[b1]"></a>PositionSensorAM5147::GetCPR()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\positionsensor.o(i._ZN20PositionSensorAM51476GetCPREv))
<BR>[Address Reference Count : 1]<UL><LI> positionsensor.o(.constdata__ZTV20PositionSensorAM5147)
</UL>
<P><STRONG><a name="[a8]"></a>PositionSensorAM5147::Sample(float)</STRONG> (Thumb, 680 bytes, Stack size 48 bytes, .\build\positionsensor.o(i._ZN20PositionSensorAM51476SampleEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PositionSensorAM5147::Sample(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_interrupt()
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> positionsensor.o(.constdata__ZTV20PositionSensorAM5147)
</UL>
<P><STRONG><a name="[b2]"></a>PositionSensorAM5147::WriteLUT(int*)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, .\build\positionsensor.o(i._ZN20PositionSensorAM51478WriteLUTEPi))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PositionSensorAM5147::WriteLUT(int*) &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> positionsensor.o(.constdata__ZTV20PositionSensorAM5147)
</UL>
<P><STRONG><a name="[214]"></a>PositionSensorAM5147::PositionSensorAM5147(int, float, int)</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, .\build\positionsensor.o(i._ZN20PositionSensorAM5147C1Eifi))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = PositionSensorAM5147::PositionSensorAM5147(int, float, int) &rArr; mbed::SPI::SPI(PinName, PinName, PinName, PinName) &rArr; spi_init &rArr; init_spi &rArr; error &rArr; exit &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::frequency(int)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::format(int, int)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::SPI(PinName, PinName, PinName, PinName)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensor::PositionSensor__sub_object()
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_prefs
</UL>

<P><STRONG><a name="[32a]"></a>PositionSensorAM5147::PositionSensorAM5147__sub_object(int, float, int)</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, .\build\positionsensor.o(i._ZN20PositionSensorAM5147C1Eifi), UNUSED)

<P><STRONG><a name="[28e]"></a>mbed::CANMessage::CANMessage()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, .\build\main.o(i._ZN4mbed10CANMessageC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_prefs
</UL>

<P><STRONG><a name="[32b]"></a>mbed::CANMessage::CANMessage__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\main.o(i._ZN4mbed10CANMessageC1Ev), UNUSED)

<P><STRONG><a name="[1e8]"></a>mbed::DigitalOut::write(int)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, .\build\main.o(i._ZN4mbed10DigitalOut5writeEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::DigitalOut::write(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV832x::spi_write(unsigned short)
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV832x::DRV832x(mbed::SPI*, mbed::DigitalOut*)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate()
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_torque_mode()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_interrupt()
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_menu_state()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onMsgReceived()
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1da]"></a>mbed::DigitalOut::DigitalOut(PinName)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, .\build\hw_setup.o(i._ZN4mbed10DigitalOutC1E7PinName))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = mbed::DigitalOut::DigitalOut(PinName) &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_PWM(GPIOStruct*)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_All_HW(GPIOStruct*)
</UL>

<P><STRONG><a name="[32c]"></a>mbed::DigitalOut::DigitalOut__sub_object(PinName)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, .\build\hw_setup.o(i._ZN4mbed10DigitalOutC1E7PinName), UNUSED)

<P><STRONG><a name="[b5]"></a>mbed::FileHandle::size()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, .\build\filehandle.o(i._ZN4mbed10FileHandle4sizeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::FileHandle::size()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> filehandle.o(.constdata__ZTVN4mbed10FileHandleE)
<LI> stream.o(.constdata__ZTVN4mbed8FileLikeE)
</UL>
<P><STRONG><a name="[b4]"></a>mbed::FileHandle::isatty()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\filehandle.o(i._ZN4mbed10FileHandle6isattyEv))
<BR>[Address Reference Count : 2]<UL><LI> filehandle.o(.constdata__ZTVN4mbed10FileHandleE)
<LI> stream.o(.constdata__ZTVN4mbed8FileLikeE)
</UL>
<P><STRONG><a name="[21a]"></a>mbed::SerialBase::_base_getc()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\serialbase.o(i._ZN4mbed10SerialBase10_base_getcEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mbed::SerialBase::_base_getc() &rArr; serial_getc &rArr; serial_readable
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_getc
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::_getc()
</UL>

<P><STRONG><a name="[21c]"></a>mbed::SerialBase::_base_putc(int)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, .\build\serialbase.o(i._ZN4mbed10SerialBase10_base_putcEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbed::SerialBase::_base_putc(int) &rArr; serial_putc &rArr; serial_writable
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::_putc(int)
</UL>

<P><STRONG><a name="[8a]"></a>mbed::SerialBase::_irq_handler(unsigned, SerialIrq)</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, .\build\serialbase.o(i._ZN4mbed10SerialBase12_irq_handlerEj9SerialIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = mbed::SerialBase::_irq_handler(unsigned, SerialIrq) &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::operator bool() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialbase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_i)
</UL>
<P><STRONG><a name="[a4]"></a>mbed::SerialBase::interrupt_handler_asynch()</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, .\build\serialbase.o(i._ZN4mbed10SerialBase24interrupt_handler_asynchEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = mbed::SerialBase::interrupt_handler_asynch() &rArr; sleep_manager_unlock_deep_sleep &rArr; error &rArr; exit &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_handler_asynch
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void(int)&rang;::operator bool() const
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void(int)&rang;::call(int) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialbase.o(.constdata)
</UL>
<P><STRONG><a name="[224]"></a>mbed::SerialBase::baud(int)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, .\build\serialbase.o(i._ZN4mbed10SerialBase4baudEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = mbed::SerialBase::baud(int) &rArr; serial_baud &rArr; init_uart &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[b6]"></a>mbed::SerialBase::lock()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\serialbase.o(i._ZN4mbed10SerialBase4lockEv))
<BR>[Address Reference Count : 1]<UL><LI> serialbase.o(.constdata__ZTVN4mbed10SerialBaseE)
</UL>
<P><STRONG><a name="[225]"></a>mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, .\build\serialbase.o(i._ZN4mbed10SerialBase6attachENS_8CallbackIFvvEEENS0_7IrqTypeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType) &rArr; sleep_manager_unlock_deep_sleep &rArr; error &rArr; exit &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback(void(*)())
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::operator bool() const
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::operator =(const mbed::Callback&lang;void()&rang;&)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_set
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::~SerialBase()
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[b7]"></a>mbed::SerialBase::unlock()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\serialbase.o(i._ZN4mbed10SerialBase6unlockEv))
<BR>[Address Reference Count : 1]<UL><LI> serialbase.o(.constdata__ZTVN4mbed10SerialBaseE)
</UL>
<P><STRONG><a name="[1f6]"></a>mbed::SerialBase::readable()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, .\build\serialbase.o(i._ZN4mbed10SerialBase8readableEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mbed::SerialBase::readable() &rArr; serial_readable
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_readable
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_interrupt()
</UL>

<P><STRONG><a name="[22c]"></a>mbed::SerialBase::SerialBase(PinName, PinName, int)</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, .\build\serialbase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = mbed::SerialBase::SerialBase(PinName, PinName, int) &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback(void(*)())
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::operator =(const mbed::Callback&lang;void()&rang;&)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_handler
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CThunk&lang;mbed::SerialBase&rang;::init(mbed::SerialBase*, void(mbed::SerialBase::*)(void*), void*)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void(int)&rang;::Callback(void(*)(int))
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, const char*, int)
</UL>

<P><STRONG><a name="[32d]"></a>mbed::SerialBase::SerialBase__sub_object(PinName, PinName, int)</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, .\build\serialbase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_i), UNUSED)

<P><STRONG><a name="[b8]"></a>mbed::SerialBase::~SerialBase()</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, .\build\serialbase.o(i._ZN4mbed10SerialBaseD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = mbed::SerialBase::~SerialBase() &rArr; mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType) &rArr; sleep_manager_unlock_deep_sleep &rArr; error &rArr; exit &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback(void(*)())
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void(int)&rang;::~Callback()
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_dtor
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::~Serial()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialbase.o(.constdata__ZTVN4mbed10SerialBaseE)
</UL>
<P><STRONG><a name="[32e]"></a>mbed::SerialBase::~SerialBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, .\build\serialbase.o(i._ZN4mbed10SerialBaseD1Ev), UNUSED)

<P><STRONG><a name="[233]"></a>mbed::Transaction&lang;mbed::SPI&rang;::operator =(const mbed::Transaction&lang;mbed::SPI&rang;&)</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, .\build\spi.o(i._ZN4mbed11TransactionINS_3SPIEEaSERKS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbed::Transaction&lang;mbed::SPI&rang;::operator =(const mbed::Transaction&lang;mbed::SPI&rang;&) &rArr; mbed::Callback&lang;void(int)&rang;::operator =(const mbed::Callback&lang;void(int)&rang;&) &rArr; mbed::Callback&lang;void(int)&rang;::Callback(const mbed::Callback&lang;void(int)&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void(int)&rang;::operator =(const mbed::Callback&lang;void(int)&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CircularBuffer&lang;mbed::Transaction&lang;mbed::SPI&rang;, (unsigned)2, unsigned&rang;::pop(mbed::Transaction&lang;mbed::SPI&rang;&)
</UL>

<P><STRONG><a name="[235]"></a>mbed::mbed_fdopen(mbed::FileHandle*, const char*)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, .\build\mbed_retarget.o(i._ZN4mbed11mbed_fdopenEPNS_10FileHandleEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = mbed::mbed_fdopen(mbed::FileHandle*, const char*) &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;PlatformMutex&rang;::get() &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_set_unbuffered_stream(std::__FILE*)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::fdopen(mbed::FileHandle*, const char*)
</UL>

<P><STRONG><a name="[237]"></a>mbed::transaction_t::transaction_t()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, .\build\spi.o(i._ZN4mbed13transaction_tC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::transaction_t::transaction_t() &rArr; mbed::Callback&lang;void(int)&rang;::Callback(void(*)(int))
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void(int)&rang;::Callback(void(*)(int))
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Transaction&lang;mbed::SPI&rang;::Transaction()
</UL>

<P><STRONG><a name="[32f]"></a>mbed::transaction_t::transaction_t__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\spi.o(i._ZN4mbed13transaction_tC1Ev), UNUSED)

<P><STRONG><a name="[238]"></a>mbed::transaction_t::~transaction_t()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\spi.o(i._ZN4mbed13transaction_tD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::transaction_t::~transaction_t() &rArr; mbed::Callback&lang;void(int)&rang;::~Callback()
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void(int)&rang;::~Callback()
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Transaction&lang;mbed::SPI&rang;::~Transaction()
</UL>

<P><STRONG><a name="[330]"></a>mbed::transaction_t::~transaction_t__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\spi.o(i._ZN4mbed13transaction_tD1Ev), UNUSED)

<P><STRONG><a name="[239]"></a>mbed::remove_filehandle(mbed::FileHandle*)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(i._ZN4mbed17remove_filehandleEPNS_10FileHandleE))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = mbed::remove_filehandle(mbed::FileHandle*) &rArr; SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;PlatformMutex&rang;::get() &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;()
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::~FileBase()
</UL>

<P><STRONG><a name="[236]"></a>mbed::mbed_set_unbuffered_stream(std::__FILE*)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(i._ZN4mbed26mbed_set_unbuffered_streamEPSt6__FILE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::mbed_set_unbuffered_stream(std::__FILE*) &rArr; setbuf &rArr; setvbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_fdopen(mbed::FileHandle*, const char*)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>

<P><STRONG><a name="[8d]"></a>mbed::CAN::_irq_handler(unsigned, CanIrqType)</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, .\build\can.o(i._ZN4mbed3CAN12_irq_handlerEj10CanIrqType))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = mbed::CAN::_irq_handler(unsigned, CanIrqType) &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::operator bool() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can.o(i._ZN4mbed3CANC1E7PinNameS1_i)
</UL>
<P><STRONG><a name="[b9]"></a>mbed::CAN::lock()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\can.o(i._ZN4mbed3CAN4lockEv))
<BR>[Address Reference Count : 1]<UL><LI> can.o(.constdata__ZTVN4mbed3CANE)
</UL>
<P><STRONG><a name="[1e7]"></a>mbed::CAN::read(mbed::CANMessage&, int)</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, .\build\can.o(i._ZN4mbed3CAN4readERNS_10CANMessageEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mbed::CAN::read(mbed::CANMessage&, int) &rArr; can_read
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_read
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onMsgReceived()
</UL>

<P><STRONG><a name="[1e9]"></a>mbed::CAN::write(mbed::CANMessage)</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, .\build\can.o(i._ZN4mbed3CAN5writeENS_10CANMessageE))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = mbed::CAN::write(mbed::CANMessage) &rArr; can_write
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_write
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onMsgReceived()
</UL>

<P><STRONG><a name="[23d]"></a>mbed::CAN::attach(mbed::Callback&lang;void()&rang;, mbed::CAN::IrqType)</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, .\build\can.o(i._ZN4mbed3CAN6attachENS_8CallbackIFvvEEENS0_7IrqTypeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = mbed::CAN::attach(mbed::Callback&lang;void()&rang;, mbed::CAN::IrqType) &rArr; sleep_manager_unlock_deep_sleep &rArr; error &rArr; exit &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback(void(*)())
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::operator bool() const
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::operator =(const mbed::Callback&lang;void()&rang;&)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_irq_set
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::~CAN()
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[23f]"></a>mbed::CAN::filter(unsigned, unsigned, CANFormat, int)</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, .\build\can.o(i._ZN4mbed3CAN6filterEjj9CANFormati))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mbed::CAN::filter(unsigned, unsigned, CANFormat, int) &rArr; can_filter &rArr; HAL_CAN_ConfigFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_filter
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[ba]"></a>mbed::CAN::unlock()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\can.o(i._ZN4mbed3CAN6unlockEv))
<BR>[Address Reference Count : 1]<UL><LI> can.o(.constdata__ZTVN4mbed3CANE)
</UL>
<P><STRONG><a name="[241]"></a>mbed::CAN::CAN(PinName, PinName, int)</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, .\build\can.o(i._ZN4mbed3CANC1E7PinNameS1_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = mbed::CAN::CAN(PinName, PinName, int) &rArr; can_init_freq &rArr; can_registers_init &rArr; can_frequency &rArr; error &rArr; exit &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback(void(*)())
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlatformMutex::PlatformMutex()
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::operator =(const mbed::Callback&lang;void()&rang;&)
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_irq_init
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_init_freq
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_prefs
</UL>

<P><STRONG><a name="[331]"></a>mbed::CAN::CAN__sub_object(PinName, PinName, int)</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, .\build\can.o(i._ZN4mbed3CANC1E7PinNameS1_i), UNUSED)

<P><STRONG><a name="[91]"></a>mbed::CAN::~CAN()</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, .\build\can.o(i._ZN4mbed3CAND1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = mbed::CAN::~CAN() &rArr; mbed::CAN::attach(mbed::Callback&lang;void()&rang;, mbed::CAN::IrqType) &rArr; sleep_manager_unlock_deep_sleep &rArr; error &rArr; exit &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback(void(*)())
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::attach(mbed::Callback&lang;void()&rang;, mbed::CAN::IrqType)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_irq_free
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_free
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_dtor
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(i.__sti___8_main_cpp_prefs)
<LI> can.o(.constdata__ZTVN4mbed3CANE)
</UL>
<P><STRONG><a name="[332]"></a>mbed::CAN::~CAN__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, .\build\can.o(i._ZN4mbed3CAND1Ev), UNUSED)

<P><STRONG><a name="[247]"></a>mbed::SPI::start_transfer(const void*, int, void*, int, unsigned char, const mbed::Callback&lang;void(int)&rang;&, int)</STRONG> (Thumb, 108 bytes, Stack size 56 bytes, .\build\spi.o(i._ZN4mbed3SPI14start_transferEPKviPvihRKNS_8CallbackIFviEEEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = mbed::SPI::start_transfer(const void*, int, void*, int, unsigned char, const mbed::Callback&lang;void(int)&rang;&, int) &rArr; mbed::SPI::_acquire() &rArr; spi_frequency &rArr; spi_get_clock_freq &rArr; error &rArr; exit &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void(int)&rang;::operator =(const mbed::Callback&lang;void(int)&rang;&)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_transfer
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::_acquire()
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::start_transaction(mbed::transaction_t*)
</UL>

<P><STRONG><a name="[24a]"></a>mbed::SPI::start_transaction(mbed::transaction_t*)</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, .\build\spi.o(i._ZN4mbed3SPI17start_transactionEPNS_13transaction_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = mbed::SPI::start_transaction(mbed::transaction_t*) &rArr; mbed::SPI::start_transfer(const void*, int, void*, int, unsigned char, const mbed::Callback&lang;void(int)&rang;&, int) &rArr; mbed::SPI::_acquire() &rArr; spi_frequency &rArr; spi_get_clock_freq &rArr; error &rArr; exit &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::start_transfer(const void*, int, void*, int, unsigned char, const mbed::Callback&lang;void(int)&rang;&, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::dequeue_transaction()
</UL>

<P><STRONG><a name="[a5]"></a>mbed::SPI::irq_handler_asynch()</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, .\build\spi.o(i._ZN4mbed3SPI18irq_handler_asynchEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = mbed::SPI::irq_handler_asynch() &rArr; mbed::SPI::dequeue_transaction() &rArr; mbed::SPI::start_transaction(mbed::transaction_t*) &rArr; mbed::SPI::start_transfer(const void*, int, void*, int, unsigned char, const mbed::Callback&lang;void(int)&rang;&, int) &rArr; mbed::SPI::_acquire() &rArr; spi_frequency &rArr; spi_get_clock_freq &rArr; error &rArr; exit &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_irq_handler_asynch
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::dequeue_transaction()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.constdata)
</UL>
<P><STRONG><a name="[24c]"></a>mbed::SPI::dequeue_transaction()</STRONG> (Thumb, 54 bytes, Stack size 64 bytes, .\build\spi.o(i._ZN4mbed3SPI19dequeue_transactionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = mbed::SPI::dequeue_transaction() &rArr; mbed::SPI::start_transaction(mbed::transaction_t*) &rArr; mbed::SPI::start_transfer(const void*, int, void*, int, unsigned char, const mbed::Callback&lang;void(int)&rang;&, int) &rArr; mbed::SPI::_acquire() &rArr; spi_frequency &rArr; spi_get_clock_freq &rArr; error &rArr; exit &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CircularBuffer&lang;mbed::Transaction&lang;mbed::SPI&rang;, (unsigned)2, unsigned&rang;::pop(mbed::Transaction&lang;mbed::SPI&rang;&)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Transaction&lang;mbed::SPI&rang;::~Transaction()
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Transaction&lang;mbed::SPI&rang;::Transaction()
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::start_transaction(mbed::transaction_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::irq_handler_asynch()
</UL>

<P><STRONG><a name="[bc]"></a>mbed::SPI::lock()</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, .\build\spi.o(i._ZN4mbed3SPI4lockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = mbed::SPI::lock() &rArr; SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;PlatformMutex&rang;::get() &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.constdata__ZTVN4mbed3SPIE)
</UL>
<P><STRONG><a name="[bb]"></a>mbed::SPI::write(int)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, .\build\spi.o(i._ZN4mbed3SPI5writeEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = mbed::SPI::write(int) &rArr; mbed::SPI::_acquire() &rArr; spi_frequency &rArr; spi_get_clock_freq &rArr; error &rArr; exit &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_write
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::_acquire()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.constdata__ZTVN4mbed3SPIE)
</UL>
<P><STRONG><a name="[217]"></a>mbed::SPI::format(int, int)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, .\build\spi.o(i._ZN4mbed3SPI6formatEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = mbed::SPI::format(int, int) &rArr; mbed::SPI::_acquire() &rArr; spi_frequency &rArr; spi_get_clock_freq &rArr; error &rArr; exit &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_format
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::_acquire()
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV832x::DRV832x(mbed::SPI*, mbed::DigitalOut*)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorAM5147::PositionSensorAM5147(int, float, int)
</UL>

<P><STRONG><a name="[bd]"></a>mbed::SPI::unlock()</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, .\build\spi.o(i._ZN4mbed3SPI6unlockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = mbed::SPI::unlock() &rArr; SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;PlatformMutex&rang;::get() &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.constdata__ZTVN4mbed3SPIE)
</UL>
<P><STRONG><a name="[248]"></a>mbed::SPI::_acquire()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, .\build\spi.o(i._ZN4mbed3SPI8_acquireEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = mbed::SPI::_acquire() &rArr; spi_frequency &rArr; spi_get_clock_freq &rArr; error &rArr; exit &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_frequency
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_format
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::frequency(int)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::format(int, int)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::SPI(PinName, PinName, PinName, PinName)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::write(int)
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::start_transfer(const void*, int, void*, int, unsigned char, const mbed::Callback&lang;void(int)&rang;&, int)
</UL>

<P><STRONG><a name="[218]"></a>mbed::SPI::frequency(int)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, .\build\spi.o(i._ZN4mbed3SPI9frequencyEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = mbed::SPI::frequency(int) &rArr; mbed::SPI::_acquire() &rArr; spi_frequency &rArr; spi_get_clock_freq &rArr; error &rArr; exit &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_frequency
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::_acquire()
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV832x::DRV832x(mbed::SPI*, mbed::DigitalOut*)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorAM5147::PositionSensorAM5147(int, float, int)
</UL>

<P><STRONG><a name="[216]"></a>mbed::SPI::SPI(PinName, PinName, PinName, PinName)</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, .\build\spi.o(i._ZN4mbed3SPIC1E7PinNameS1_S1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = mbed::SPI::SPI(PinName, PinName, PinName, PinName) &rArr; spi_init &rArr; init_spi &rArr; error &rArr; exit &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CThunk&lang;mbed::SPI&rang;::init(mbed::SPI*, void(mbed::SPI::*)(void*), void*)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::_acquire()
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void(int)&rang;::Callback(void(*)(int))
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorAM5147::PositionSensorAM5147(int, float, int)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_prefs
</UL>

<P><STRONG><a name="[333]"></a>mbed::SPI::SPI__sub_object(PinName, PinName, PinName, PinName)</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, .\build\spi.o(i._ZN4mbed3SPIC1E7PinNameS1_S1_S1_), UNUSED)

<P><STRONG><a name="[92]"></a>mbed::SPI::~SPI()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, .\build\spi.o(i._ZN4mbed3SPID1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::SPI::~SPI() &rArr; mbed::Callback&lang;void(int)&rang;::~Callback()
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void(int)&rang;::~Callback()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(i.__sti___8_main_cpp_prefs)
<LI> spi.o(.constdata__ZTVN4mbed3SPIE)
</UL>
<P><STRONG><a name="[334]"></a>mbed::SPI::~SPI__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\spi.o(i._ZN4mbed3SPID1Ev), UNUSED)

<P><STRONG><a name="[be]"></a>mbed::Serial::lock()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\serial.o(i._ZN4mbed6Serial4lockEv))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-188} to mbed::Serial::lock()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[c0]"></a>mbed::Serial::_getc()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\serial.o(i._ZN4mbed6Serial5_getcEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbed::Serial::_getc() &rArr; mbed::SerialBase::_base_getc() &rArr; serial_getc &rArr; serial_readable
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_base_getc()
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-188} to mbed::Serial::_getc()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[c1]"></a>mbed::Serial::_putc(int)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, .\build\serial.o(i._ZN4mbed6Serial5_putcEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbed::Serial::_putc(int) &rArr; mbed::SerialBase::_base_putc(int) &rArr; serial_putc &rArr; serial_writable
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_base_putc(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-188} to mbed::Serial::_putc(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[bf]"></a>mbed::Serial::unlock()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\serial.o(i._ZN4mbed6Serial6unlockEv))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-188} to mbed::Serial::unlock()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[253]"></a>mbed::Serial::Serial(PinName, PinName, const char*, int)</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, .\build\serial.o(i._ZN4mbed6SerialC1E7PinNameS1_PKci))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = mbed::Serial::Serial(PinName, PinName, const char*, int) &rArr; mbed::Stream::Stream__sub_object(const char*) &rArr; mbed::fdopen(mbed::FileHandle*, const char*) &rArr; mbed::mbed_fdopen(mbed::FileHandle*, const char*) &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;PlatformMutex&rang;::get() &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlatformMutex::PlatformMutex()
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_prefs
</UL>

<P><STRONG><a name="[335]"></a>mbed::Serial::Serial__sub_object(PinName, PinName, const char*, int)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, .\build\serial.o(i._ZN4mbed6SerialC1E7PinNameS1_PKci), UNUSED)

<P><STRONG><a name="[90]"></a>mbed::Serial::~Serial()</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, .\build\main.o(i._ZN4mbed6SerialD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = mbed::Serial::~Serial() &rArr; mbed::SerialBase::~SerialBase() &rArr; mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType) &rArr; sleep_manager_unlock_deep_sleep &rArr; error &rArr; exit &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::~Stream__sub_object()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::~SerialBase()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(i.__sti___8_main_cpp_prefs)
<LI> serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[336]"></a>mbed::Serial::~Serial__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\main.o(i._ZN4mbed6SerialD1Ev), UNUSED)

<P><STRONG><a name="[1eb]"></a>mbed::Stream::getc()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, .\build\stream.o(i._ZN4mbed6Stream4getcEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = mbed::Stream::getc() &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_getc(std::__FILE*)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_interrupt()
</UL>

<P><STRONG><a name="[cd]"></a>mbed::Stream::lock()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\stream.o(i._ZN4mbed6Stream4lockEv))
<BR>[Address Reference Count : 1]<UL><LI> stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[1f5]"></a>mbed::Stream::putc(int)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, .\build\stream.o(i._ZN4mbed6Stream4putcEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = mbed::Stream::putc(int) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_interrupt()
</UL>

<P><STRONG><a name="[c2]"></a>mbed::Stream::read(void*, unsigned)</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, .\build\stream.o(i._ZN4mbed6Stream4readEPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbed::Stream::read(void*, unsigned)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[c4]"></a>mbed::Stream::seek(long, int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\stream.o(i._ZN4mbed6Stream4seekEli))
<BR>[Address Reference Count : 2]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[c7]"></a>mbed::Stream::size()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\stream.o(i._ZN4mbed6Stream4sizeEv))
<BR>[Address Reference Count : 2]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[c5]"></a>mbed::Stream::close()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\stream.o(i._ZN4mbed6Stream5closeEv))
<BR>[Address Reference Count : 2]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[c3]"></a>mbed::Stream::write(const void*, unsigned)</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, .\build\stream.o(i._ZN4mbed6Stream5writeEPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::Stream::write(const void*, unsigned)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[c6]"></a>mbed::Stream::isatty()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\stream.o(i._ZN4mbed6Stream6isattyEv))
<BR>[Address Reference Count : 2]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[256]"></a>mbed::Stream::printf(const char*, ...)</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, .\build\stream.o(i._ZN4mbed6Stream6printfEPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = mbed::Stream::printf(const char*, ...) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vfprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[ce]"></a>mbed::Stream::unlock()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\stream.o(i._ZN4mbed6Stream6unlockEv))
<BR>[Address Reference Count : 1]<UL><LI> stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[254]"></a>mbed::Stream::Stream__sub_object(const char*)</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, .\build\stream.o(i._ZN4mbed6StreamC2EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = mbed::Stream::Stream__sub_object(const char*) &rArr; mbed::fdopen(mbed::FileHandle*, const char*) &rArr; mbed::mbed_fdopen(mbed::FileHandle*, const char*) &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;PlatformMutex&rang;::get() &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::fdopen(mbed::FileHandle*, const char*)
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::FileBase(const char*, mbed::PathType)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_set_unbuffered_stream(std::__FILE*)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, const char*, int)
</UL>

<P><STRONG><a name="[337]"></a>mbed::Stream::~Stream()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\stream.o(i._ZN4mbed6StreamD2Ev), UNUSED)

<P><STRONG><a name="[cc]"></a>mbed::Stream::~Stream__sub_object()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, .\build\stream.o(i._ZN4mbed6StreamD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = mbed::Stream::~Stream__sub_object() &rArr; mbed::FileLike::~FileLike__sub_object() &rArr; mbed::FileBase::~FileBase() &rArr; mbed::remove_filehandle(mbed::FileHandle*) &rArr; SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;PlatformMutex&rang;::get() &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileLike::~FileLike__sub_object()
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::~Serial()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[258]"></a>mbed::fdopen(mbed::FileHandle*, const char*)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, .\build\filehandle.o(i._ZN4mbed6fdopenEPNS_10FileHandleEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = mbed::fdopen(mbed::FileHandle*, const char*) &rArr; mbed::mbed_fdopen(mbed::FileHandle*, const char*) &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;PlatformMutex&rang;::get() &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_fdopen(mbed::FileHandle*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>

<P><STRONG><a name="[25d]"></a>mbed::FileBase::getPathType()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\filebase.o(i._ZN4mbed8FileBase11getPathTypeEv))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFile()
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFileSystem()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::~FileBase()
</UL>

<P><STRONG><a name="[25a]"></a>mbed::FileBase::lookup(const char*, unsigned)</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, .\build\filebase.o(i._ZN4mbed8FileBase6lookupEPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;PlatformMutex&rang;::get() &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;()
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(const char*)
</UL>

<P><STRONG><a name="[257]"></a>mbed::FileBase::FileBase(const char*, mbed::PathType)</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, .\build\filebase.o(i._ZN4mbed8FileBaseC1EPKcNS_8PathTypeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = mbed::FileBase::FileBase(const char*, mbed::PathType) &rArr; SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;PlatformMutex&rang;::get() &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;()
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>

<P><STRONG><a name="[338]"></a>mbed::FileBase::FileBase__sub_object(const char*, mbed::PathType)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, .\build\filebase.o(i._ZN4mbed8FileBaseC1EPKcNS_8PathTypeE), UNUSED)

<P><STRONG><a name="[cf]"></a>mbed::FileBase::~FileBase()</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, .\build\filebase.o(i._ZN4mbed8FileBaseD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = mbed::FileBase::~FileBase() &rArr; mbed::remove_filehandle(mbed::FileHandle*) &rArr; SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;PlatformMutex&rang;::get() &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;()
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::remove_filehandle(mbed::FileHandle*)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::getPathType()
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileLike::~FileLike__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> filebase.o(.constdata__ZTVN4mbed8FileBaseE)
</UL>
<P><STRONG><a name="[339]"></a>mbed::FileBase::~FileBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, .\build\filebase.o(i._ZN4mbed8FileBaseD1Ev), UNUSED)

<P><STRONG><a name="[33a]"></a>mbed::FileLike::~FileLike()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\stream.o(i._ZN4mbed8FileLikeD2Ev), UNUSED)

<P><STRONG><a name="[d0]"></a>mbed::FileLike::~FileLike__sub_object()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, .\build\stream.o(i._ZN4mbed8FileLikeD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = mbed::FileLike::~FileLike__sub_object() &rArr; mbed::FileBase::~FileBase() &rArr; mbed::remove_filehandle(mbed::FileHandle*) &rArr; SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;PlatformMutex&rang;::get() &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::~FileBase()
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::~Stream__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stream.o(.constdata__ZTVN4mbed8FileLikeE)
</UL>
<P><STRONG><a name="[25e]"></a>mbed::FilePath::fileSystem()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, .\build\filepath.o(i._ZN4mbed8FilePath10fileSystemEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::FilePath::fileSystem() &rArr; mbed::FilePath::isFileSystem()
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFileSystem()
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[25f]"></a>mbed::FilePath::isFileSystem()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, .\build\filepath.o(i._ZN4mbed8FilePath12isFileSystemEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FilePath::isFileSystem()
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::getPathType()
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileSystem()
</UL>

<P><STRONG><a name="[260]"></a>mbed::FilePath::file()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, .\build\filepath.o(i._ZN4mbed8FilePath4fileEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::FilePath::file() &rArr; mbed::FilePath::isFile()
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFile()
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[298]"></a>mbed::FilePath::exists()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\filepath.o(i._ZN4mbed8FilePath6existsEv))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[261]"></a>mbed::FilePath::isFile()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, .\build\filepath.o(i._ZN4mbed8FilePath6isFileEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FilePath::isFile()
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::getPathType()
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::file()
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[299]"></a>mbed::FilePath::fileName()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\filepath.o(i._ZN4mbed8FilePath8fileNameEv))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[262]"></a>mbed::FilePath::FilePath(const char*)</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, .\build\filepath.o(i._ZN4mbed8FilePathC1EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;PlatformMutex&rang;::get() &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[33b]"></a>mbed::FilePath::FilePath__sub_object(const char*)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, .\build\filepath.o(i._ZN4mbed8FilePathC1EPKc), UNUSED)

<P><STRONG><a name="[255]"></a>mbed::mbed_getc(std::__FILE*)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(i._ZN4mbed9mbed_getcEPSt6__FILE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbed::mbed_getc(std::__FILE*) &rArr; fgetc &rArr; __filbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::getc()
</UL>

<P><STRONG><a name="[1ea]"></a>DRV832x::disable_gd()</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, .\build\drv.o(i._ZN7DRV832x10disable_gdEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = DRV832x::disable_gd() &rArr; DRV832x::write_register(int, int) &rArr; DRV832x::spi_write(unsigned short) &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr; schedule_interrupt &rArr; update_present_time &rArr; convert_timestamp
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV832x::write_register(int, int)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV832x::read_register(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate()
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_menu_state()
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[266]"></a>DRV832x::write_CSACR(int, int, int, int, int, int, int, int, int)</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, .\build\drv.o(i._ZN7DRV832x11write_CSACREiiiiiiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = DRV832x::write_CSACR(int, int, int, int, int, int, int, int, int) &rArr; DRV832x::write_register(int, int) &rArr; DRV832x::spi_write(unsigned short) &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr; schedule_interrupt &rArr; update_present_time &rArr; convert_timestamp
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV832x::write_register(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[267]"></a>DRV832x::write_OCPCR(int, int, int, int, int)</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, .\build\drv.o(i._ZN7DRV832x11write_OCPCREiiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = DRV832x::write_OCPCR(int, int, int, int, int) &rArr; DRV832x::write_register(int, int) &rArr; DRV832x::spi_write(unsigned short) &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr; schedule_interrupt &rArr; update_present_time &rArr; convert_timestamp
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV832x::write_register(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[264]"></a>DRV832x::read_register(int)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, .\build\drv.o(i._ZN7DRV832x13read_registerEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = DRV832x::read_register(int) &rArr; DRV832x::spi_write(unsigned short) &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr; schedule_interrupt &rArr; update_present_time &rArr; convert_timestamp
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV832x::spi_write(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV832x::enable_gd()
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV832x::disable_gd()
</UL>

<P><STRONG><a name="[265]"></a>DRV832x::write_register(int, int)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, .\build\drv.o(i._ZN7DRV832x14write_registerEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = DRV832x::write_register(int, int) &rArr; DRV832x::spi_write(unsigned short) &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr; schedule_interrupt &rArr; update_present_time &rArr; convert_timestamp
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV832x::spi_write(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV832x::write_DCR(int, int, int, int, int, int, int, int, int)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV832x::enable_gd()
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV832x::calibrate()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV832x::write_OCPCR(int, int, int, int, int)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV832x::write_CSACR(int, int, int, int, int, int, int, int, int)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV832x::disable_gd()
</UL>

<P><STRONG><a name="[269]"></a>DRV832x::calibrate()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, .\build\drv.o(i._ZN7DRV832x9calibrateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = DRV832x::calibrate() &rArr; DRV832x::write_register(int, int) &rArr; DRV832x::spi_write(unsigned short) &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr; schedule_interrupt &rArr; update_present_time &rArr; convert_timestamp
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV832x::write_register(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1f7]"></a>DRV832x::enable_gd()</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, .\build\drv.o(i._ZN7DRV832x9enable_gdEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = DRV832x::enable_gd() &rArr; DRV832x::write_register(int, int) &rArr; DRV832x::spi_write(unsigned short) &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr; schedule_interrupt &rArr; update_present_time &rArr; convert_timestamp
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV832x::write_register(int, int)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV832x::read_register(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate()
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_torque_mode()
</UL>

<P><STRONG><a name="[268]"></a>DRV832x::spi_write(unsigned short)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, .\build\drv.o(i._ZN7DRV832x9spi_writeEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = DRV832x::spi_write(unsigned short) &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr; schedule_interrupt &rArr; update_present_time &rArr; convert_timestamp
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::write(int)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV832x::write_register(int, int)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV832x::read_register(int)
</UL>

<P><STRONG><a name="[26a]"></a>DRV832x::write_DCR(int, int, int, int, int, int, int, int, int)</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, .\build\drv.o(i._ZN7DRV832x9write_DCREiiiiiiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = DRV832x::write_DCR(int, int, int, int, int, int, int, int, int) &rArr; DRV832x::write_register(int, int) &rArr; DRV832x::spi_write(unsigned short) &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr; schedule_interrupt &rArr; update_present_time &rArr; convert_timestamp
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV832x::write_register(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[26b]"></a>DRV832x::DRV832x(mbed::SPI*, mbed::DigitalOut*)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, .\build\drv.o(i._ZN7DRV832xC1EPN4mbed3SPIEPNS0_10DigitalOutE))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = DRV832x::DRV832x(mbed::SPI*, mbed::DigitalOut*) &rArr; mbed::SPI::frequency(int) &rArr; mbed::SPI::_acquire() &rArr; spi_frequency &rArr; spi_get_clock_freq &rArr; error &rArr; exit &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::frequency(int)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::format(int, int)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::write(int)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_prefs
</UL>

<P><STRONG><a name="[33c]"></a>DRV832x::DRV832x__sub_object(mbed::SPI*, mbed::DigitalOut*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, .\build\drv.o(i._ZN7DRV832xC1EPN4mbed3SPIEPNS0_10DigitalOutE), UNUSED)

<P><STRONG><a name="[26c]"></a>FastPWM::initFastPWM()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, .\FastPWM.lib(fastpwm_stm_tim.o)(i._ZN7FastPWM11initFastPWMEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = FastPWM::initFastPWM() &rArr; operator new(unsigned) &rArr; error &rArr; exit &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getChannel(TIM_TypeDef*, PinName)
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastPWM::FastPWM(PinName, int)
</UL>

<P><STRONG><a name="[26e]"></a>FastPWM::updateTicks(unsigned)</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, .\FastPWM.lib(fastpwm_common.o)(i._ZN7FastPWM11updateTicksEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FastPWM::updateTicks(unsigned) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastPWM::prescaler(int)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastPWM::calcPrescaler(unsigned long long)
</UL>

<P><STRONG><a name="[27b]"></a>FastPWM::period_ticks(unsigned)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\FastPWM.lib(fastpwm_stm_tim.o)(i._ZN7FastPWM12period_ticksEj))
<BR><BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastPWM::period(double)
</UL>

<P><STRONG><a name="[274]"></a>FastPWM::setPrescaler(unsigned)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, .\FastPWM.lib(fastpwm_stm_tim.o)(i._ZN7FastPWM12setPrescalerEj))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastPWM::prescaler(int)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastPWM::calcPrescaler(unsigned long long)
</UL>

<P><STRONG><a name="[272]"></a>FastPWM::calcPrescaler(unsigned long long)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, .\FastPWM.lib(fastpwm_common.o)(i._ZN7FastPWM13calcPrescalerEy))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FastPWM::calcPrescaler(unsigned long long) &rArr; FastPWM::updateTicks(unsigned) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastPWM::setPrescaler(unsigned)
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastPWM::updateTicks(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastPWM::period(double)
</UL>

<P><STRONG><a name="[278]"></a>FastPWM::pulsewidth_ticks(unsigned)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\FastPWM.lib(fastpwm_stm_tim.o)(i._ZN7FastPWM16pulsewidth_ticksEj))
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastPWM::write(double)
</UL>

<P><STRONG><a name="[275]"></a>FastPWM::write(double)</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, .\FastPWM.lib(fastpwm_common.o)(i._ZN7FastPWM5writeEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FastPWM::write(double) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastPWM::getPeriod()
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastPWM::pulsewidth_ticks(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastPWM::FastPWM(PinName, int)
</UL>

<P><STRONG><a name="[279]"></a>FastPWM::period(double)</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, .\FastPWM.lib(fastpwm_common.o)(i._ZN7FastPWM6periodEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = FastPWM::period(double) &rArr; FastPWM::calcPrescaler(unsigned long long) &rArr; FastPWM::updateTicks(unsigned) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastPWM::period_ticks(unsigned)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastPWM::calcPrescaler(unsigned long long)
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastPWM::FastPWM(PinName, int)
</UL>

<P><STRONG><a name="[276]"></a>FastPWM::getPeriod()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\FastPWM.lib(fastpwm_stm_tim.o)(i._ZN7FastPWM9getPeriodEv))
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastPWM::write(double)
</UL>

<P><STRONG><a name="[27c]"></a>FastPWM::prescaler(int)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, .\FastPWM.lib(fastpwm_common.o)(i._ZN7FastPWM9prescalerEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FastPWM::prescaler(int) &rArr; FastPWM::updateTicks(unsigned) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastPWM::setPrescaler(unsigned)
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastPWM::updateTicks(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastPWM::FastPWM(PinName, int)
</UL>

<P><STRONG><a name="[1fe]"></a>FastPWM::FastPWM(PinName, int)</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, .\FastPWM.lib(fastpwm_common.o)(i._ZN7FastPWMC1E7PinNamei))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = FastPWM::FastPWM(PinName, int) &rArr; pwmout_init &rArr; pwmout_period_us &rArr; pwmout_write &rArr; error &rArr; exit &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_init
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastPWM::initFastPWM()
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastPWM::prescaler(int)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastPWM::period(double)
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastPWM::write(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_PWM(GPIOStruct*)
</UL>

<P><STRONG><a name="[33d]"></a>FastPWM::FastPWM__sub_object(PinName, int)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, .\FastPWM.lib(fastpwm_common.o)(i._ZN7FastPWMC1E7PinNamei), UNUSED)

<P><STRONG><a name="[1fa]"></a>FastMath::FastCos(float)</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, .\build\fastmath.o(i._ZN8FastMath7FastCosEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FastMath::FastCos(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastMath::FastSin(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dq0(float, float, float, float, float*, float*)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abc(float, float, float, float*, float*, float*)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commutate(ControllerStruct*, ObserverStruct*, GPIOStruct*, float)
</UL>

<P><STRONG><a name="[1fb]"></a>FastMath::FastSin(float)</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, .\build\fastmath.o(i._ZN8FastMath7FastSinEf))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastMath::FastCos(float)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dq0(float, float, float, float, float*, float*)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abc(float, float, float, float*, float*, float*)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commutate(ControllerStruct*, ObserverStruct*, GPIOStruct*, float)
</UL>

<P><STRONG><a name="[1e3]"></a>std::pow(float, int)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, .\build\calibration.o(i._ZSt3powfi))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = std::pow(float, int) &rArr; __hardfp_powf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate(PositionSensor*, GPIOStruct*, ControllerStruct*, PreferenceWriter*)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;order_phases(PositionSensor*, GPIOStruct*, ControllerStruct*, PreferenceWriter*)
</UL>

<P><STRONG><a name="[1e4]"></a>std::sqrt(float)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, .\build\calibration.o(i._ZSt4sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = std::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate(PositionSensor*, GPIOStruct*, ControllerStruct*, PreferenceWriter*)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;order_phases(PositionSensor*, GPIOStruct*, ControllerStruct*, PreferenceWriter*)
</UL>

<P><STRONG><a name="[ca]"></a>thunk{-188} to mbed::Serial::lock()</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, .\build\serial.o(i._ZThn188_N4mbed6Serial4lockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = thunk{-188} to mbed::Serial::lock()
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::lock()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[c9]"></a>thunk{-188} to mbed::Serial::_getc()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\serial.o(i._ZThn188_N4mbed6Serial5_getcEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = thunk{-188} to mbed::Serial::_getc() &rArr; mbed::Serial::_getc() &rArr; mbed::SerialBase::_base_getc() &rArr; serial_getc &rArr; serial_readable
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::_getc()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[c8]"></a>thunk{-188} to mbed::Serial::_putc(int)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, .\build\serial.o(i._ZThn188_N4mbed6Serial5_putcEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = thunk{-188} to mbed::Serial::_putc(int) &rArr; mbed::Serial::_putc(int) &rArr; mbed::SerialBase::_base_putc(int) &rArr; serial_putc &rArr; serial_writable
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::_putc(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[cb]"></a>thunk{-188} to mbed::Serial::unlock()</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, .\build\serial.o(i._ZThn188_N4mbed6Serial6unlockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = thunk{-188} to mbed::Serial::unlock()
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::unlock()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[202]"></a>operator delete[] (void*)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(i._ZdaPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = operator delete[] (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate(PositionSensor*, GPIOStruct*, ControllerStruct*, PreferenceWriter*)
</UL>

<P><STRONG><a name="[200]"></a>operator new[] (unsigned)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(i._Znaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = operator new[] (unsigned) &rArr; error &rArr; exit &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate(PositionSensor*, GPIOStruct*, ControllerStruct*, PreferenceWriter*)
</UL>

<P><STRONG><a name="[1d9]"></a>operator new(unsigned)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(i._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = operator new(unsigned) &rArr; error &rArr; exit &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorAM5147::PositionSensorAM5147(int, float, int)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreferenceWriter::PreferenceWriter(unsigned)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_PWM(GPIOStruct*)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_All_HW(GPIOStruct*)
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastPWM::initFastPWM()
</UL>

<P><STRONG><a name="[149]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\m_wm.l(fpclassify.o)(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>

<P><STRONG><a name="[286]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\m_wm.l(fpclassifyf.o)(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[2b4]"></a>__ARM_isnanf</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\main.o(i.__ARM_isnanf))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[28d]"></a>__aeabi_atexit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(i.__aeabi_atexit))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_prefs
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___7_SPI_cpp_ab1f1164
</UL>

<P><STRONG><a name="[22f]"></a>__aeabi_vec_ctor_nocookie_nodtor</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\cpplib\cpprt_w.l(aeabi_vec_ctor_nocookie_nodtor.o)(i.__aeabi_vec_ctor_nocookie_nodtor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::CAN(PinName, PinName, int)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___7_SPI_cpp_ab1f1164
</UL>

<P><STRONG><a name="[a6]"></a>__cxa_pure_virtual</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\cpplib\cpprt_w.l(pure_virt.o)(i.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_pure_virtual &rArr; __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>
<BR>[Address Reference Count : 4]<UL><LI> positionsensor.o(.constdata__ZTV14PositionSensor)
<LI> filehandle.o(.constdata__ZTVN4mbed10FileHandleE)
<LI> stream.o(.constdata__ZTVN4mbed6StreamE)
<LI> stream.o(.constdata__ZTVN4mbed8FileLikeE)
</UL>
<P><STRONG><a name="[1f1]"></a>__hardfp_atof</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\m_wm.l(atof.o)(i.__hardfp_atof))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_interrupt()
</UL>

<P><STRONG><a name="[201]"></a>__hardfp_fmodf</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\m_wm.l(fmodf.o)(i.__hardfp_fmodf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __hardfp_fmodf &rArr; _frem &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frem
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate(PositionSensor*, GPIOStruct*, ControllerStruct*, PreferenceWriter*)
</UL>

<P><STRONG><a name="[281]"></a>__hardfp_ldexp</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\m_wm.l(ldexp.o)(i.__hardfp_ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __hardfp_ldexp &rArr; __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
</UL>

<P><STRONG><a name="[27e]"></a>__hardfp_powf</STRONG> (Thumb, 1518 bytes, Stack size 16 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\m_wm.l(powf.o)(i.__hardfp_powf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_powf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::pow(float, int)
</UL>

<P><STRONG><a name="[33e]"></a>__mathlib_powf</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\m_wm.l(powf.o)(i.__hardfp_powf), UNUSED)

<P><STRONG><a name="[1d0]"></a>__hardfp_sqrtf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\m_wm.l(sqrtf.o)(i.__hardfp_sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sqrt(float)
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_norm(float*, float*, float)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commutate(ControllerStruct*, ObserverStruct*, GPIOStruct*, float)
</UL>

<P><STRONG><a name="[285]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\m_wm.l(dunder.o)(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>

<P><STRONG><a name="[284]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\m_wm.l(dunder.o)(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>

<P><STRONG><a name="[28a]"></a>__mathlib_flt_divzero</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\m_wm.l(funder.o)(i.__mathlib_flt_divzero))
<BR><BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[289]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\m_wm.l(funder.o)(i.__mathlib_flt_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[280]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\m_wm.l(funder.o)(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmodf
</UL>

<P><STRONG><a name="[288]"></a>__mathlib_flt_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\m_wm.l(funder.o)(i.__mathlib_flt_overflow))
<BR><BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[287]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\m_wm.l(funder.o)(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[172]"></a>__mathlib_narrow</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\m_wm.l(narrow.o)(i.__mathlib_narrow))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __mathlib_narrow &rArr; frexp &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[17b]"></a>__support_ldexp</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\m_wm.l(ldexp.o)(i.__support_ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __support_ldexp &rArr; __hardfp_ldexp &rArr; __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[10d]"></a>__user_setup_stackheap</STRONG> (Thumb, 34 bytes, Stack size 40 bytes, .\build\mbed_retarget.o(i.__user_setup_stackheap))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __user_setup_stackheap &rArr; _mbed_user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mbed_user_setup_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[127]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(__printf_wp.o)(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[28f]"></a>_mbed_user_setup_stackheap</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, .\build\mbed_retarget.o(i._mbed_user_setup_stackheap))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _mbed_user_setup_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[10f]"></a>_platform_post_stackheap_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\mbed_sdk_boot.o(i._platform_post_stackheap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = _platform_post_stackheap_init &rArr; mbed_sdk_init &rArr; SetSysClock &rArr; SetSysClock_PLL_HSE &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_OC_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_copy_nvic
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_postsh_1
</UL>

<P><STRONG><a name="[137]"></a>_sys_close</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(i._sys_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _sys_close
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[15e]"></a>_sys_flen</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(i._sys_flen))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _sys_flen
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[15f]"></a>_sys_istty</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(i._sys_istty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _sys_istty
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[132]"></a>_sys_open</STRONG> (Thumb, 354 bytes, Stack size 48 bytes, .\build\mbed_retarget.o(i._sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = _sys_open &rArr; mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;PlatformMutex&rang;::get() &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(const char*)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileName()
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFile()
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::exists()
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::file()
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileSystem()
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;()
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_open_errors(int, unsigned)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_serial()
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[156]"></a>_sys_read</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, .\build\mbed_retarget.o(i._sys_read), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_getc
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_serial()
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>

<P><STRONG><a name="[15a]"></a>_sys_seek</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, .\build\mbed_retarget.o(i._sys_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _sys_seek
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[162]"></a>_sys_write</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, .\build\mbed_retarget.o(i._sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = _sys_write &rArr; init_serial() &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_serial()
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[240]"></a>can_filter</STRONG> (Thumb, 118 bytes, Stack size 72 bytes, .\build\can_api.o(i.can_filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = can_filter &rArr; HAL_CAN_ConfigFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ConfigFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::filter(unsigned, unsigned, CANFormat, int)
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_init_freq
</UL>

<P><STRONG><a name="[246]"></a>can_free</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, .\build\can_api.o(i.can_free))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::~CAN()
</UL>

<P><STRONG><a name="[29b]"></a>can_frequency</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, .\build\can_api.o(i.can_frequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = can_frequency &rArr; error &rArr; exit &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_speed
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_registers_init
</UL>

<P><STRONG><a name="[243]"></a>can_init_freq</STRONG> (Thumb, 302 bytes, Stack size 40 bytes, .\build\can_api.o(i.can_init_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = can_init_freq &rArr; can_registers_init &rArr; can_frequency &rArr; error &rArr; exit &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_registers_init
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_filter
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::CAN(PinName, PinName, int)
</UL>

<P><STRONG><a name="[245]"></a>can_irq_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, .\build\can_api.o(i.can_irq_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_irq_free
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::~CAN()
</UL>

<P><STRONG><a name="[244]"></a>can_irq_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\build\can_api.o(i.can_irq_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_irq_init
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::CAN(PinName, PinName, int)
</UL>

<P><STRONG><a name="[23e]"></a>can_irq_set</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, .\build\can_api.o(i.can_irq_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = can_irq_set
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::attach(mbed::Callback&lang;void()&rang;, mbed::CAN::IrqType)
</UL>

<P><STRONG><a name="[23b]"></a>can_read</STRONG> (Thumb, 250 bytes, Stack size 12 bytes, .\build\can_api.o(i.can_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = can_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::read(mbed::CANMessage&, int)
</UL>

<P><STRONG><a name="[23c]"></a>can_write</STRONG> (Thumb, 326 bytes, Stack size 28 bytes, .\build\can_api.o(i.can_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = can_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::write(mbed::CANMessage)
</UL>

<P><STRONG><a name="[2a4]"></a>core_util_are_interrupts_enabled</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\mbed_critical.o(i.core_util_are_interrupts_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
</UL>

<P><STRONG><a name="[2a2]"></a>core_util_atomic_decr_u16</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, .\build\mbed_critical.o(i.core_util_atomic_decr_u16))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = core_util_atomic_decr_u16 &rArr; core_util_critical_section_exit &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep
</UL>

<P><STRONG><a name="[2a3]"></a>core_util_atomic_incr_u16</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, .\build\mbed_critical.o(i.core_util_atomic_incr_u16))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = core_util_atomic_incr_u16 &rArr; core_util_critical_section_exit &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep
</UL>

<P><STRONG><a name="[226]"></a>core_util_critical_section_enter</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, .\build\mbed_critical.o(i.core_util_critical_section_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = core_util_critical_section_enter &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_are_interrupts_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastPWM::FastPWM(PinName, int)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_incr_u16
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_decr_u16
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vfprintf
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CircularBuffer&lang;mbed::Transaction&lang;mbed::SPI&rang;, (unsigned)2, unsigned&rang;::pop(mbed::Transaction&lang;mbed::SPI&rang;&)
</UL>

<P><STRONG><a name="[22a]"></a>core_util_critical_section_exit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, .\build\mbed_critical.o(i.core_util_critical_section_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = core_util_critical_section_exit &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_are_interrupts_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastPWM::FastPWM(PinName, int)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_incr_u16
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_decr_u16
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vfprintf
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CircularBuffer&lang;mbed::Transaction&lang;mbed::SPI&rang;, (unsigned)2, unsigned&rang;::pop(mbed::Transaction&lang;mbed::SPI&rang;&)
</UL>

<P><STRONG><a name="[1c5]"></a>error</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, .\build\mbed_error.o(i.error))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = error &rArr; exit &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vfprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_function
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_registers_init
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_frequency
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_Clock
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_write
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_period_us
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_get_clock_freq
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_spi
</UL>

<P><STRONG><a name="[114]"></a>exit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(i.exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = exit &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[263]"></a>fgetc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(fgetc.o)(i.fgetc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fgetc &rArr; __filbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_getc(std::__FILE*)
</UL>

<P><STRONG><a name="[75]"></a>fputc</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(fputc.o)(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::putc(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[28b]"></a>frexp</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\m_wm.l(frexp.o)(i.frexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = frexp &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[2d7]"></a>get_us_ticker_data</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_us_ticker_api.o(i.get_us_ticker_data))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
</UL>

<P><STRONG><a name="[293]"></a>gpio_dir</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, .\build\gpio_api.o(i.gpio_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = gpio_dir &rArr; LL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_out
</UL>

<P><STRONG><a name="[291]"></a>gpio_init</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, .\build\gpio_api.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = gpio_init &rArr; gpio_set &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_out
</UL>

<P><STRONG><a name="[219]"></a>gpio_init_out</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, .\build\mbed_gpio.o(i.gpio_init_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorAM5147::PositionSensorAM5147(int, float, int)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_prefs
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::DigitalOut(PinName)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
</UL>

<P><STRONG><a name="[2ab]"></a>gpio_init_out_ex</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, .\build\mbed_gpio.o(i.gpio_init_out_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_out
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
</UL>

<P><STRONG><a name="[294]"></a>gpio_mode</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, .\build\gpio_api.o(i.gpio_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_out
</UL>

<P><STRONG><a name="[2aa]"></a>gpio_set</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, .\build\gpio_api.o(i.gpio_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = gpio_set &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[2ad]"></a>init_spi</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, .\build\stm_spi_api.o(i.init_spi))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = init_spi &rArr; error &rArr; exit &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_frequency
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_format
</UL>

<P><STRONG><a name="[2ae]"></a>init_uart</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, .\build\serial_api.o(i.init_uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + In Cycle
<LI>Call Chain = init_uart &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
</UL>

<P><STRONG><a name="[183]"></a>$Super$$main</STRONG> (Thumb, 872 bytes, Stack size 560 bytes, .\build\main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216 + Unknown Stack Size
<LI>Call Chain = $Super$$main &rArr; Init_All_HW(GPIOStruct*) &rArr; Init_PWM(GPIOStruct*) &rArr; FastPWM::FastPWM(PinName, int) &rArr; pwmout_init &rArr; pwmout_period_us &rArr; pwmout_write &rArr; error &rArr; exit &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback(void(*)())
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::write(int)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV832x::write_DCR(int, int, int, int, int, int, int, int, int)
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV832x::calibrate()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV832x::write_OCPCR(int, int, int, int, int)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV832x::write_CSACR(int, int, int, int, int, int, int, int, int)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV832x::disable_gd()
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::filter(unsigned, unsigned, CANFormat, int)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::attach(mbed::Callback&lang;void()&rang;, mbed::CAN::IrqType)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::baud(int)
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorAM5147::WriteLUT(int*)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorAM5147::GetRawPosition()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorAM5147::SetMechOffset(float)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorAM5147::SetElecOffset(float)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreferenceWriter::load()
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_foc(ControllerStruct*)
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_controller_params(ControllerStruct*)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_observer(ObserverStruct*)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zero_current(int*, int*)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority(IRQn_Type, unsigned)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_All_HW(GPIOStruct*)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21f]"></a>mbed_assert_internal</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, .\build\mbed_assert.o(i.mbed_assert_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_printf
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_init_freq
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::_irq_handler(unsigned, CanIrqType)
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;PlatformMutex&rang;::get()
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_init
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::irq_handler_asynch()
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void(int)&rang;::call(int) const
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_irq_handler(unsigned, SerialIrq)
</UL>

<P><STRONG><a name="[295]"></a>mbed_copy_nvic</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, .\build\mbed_sdk_boot.o(i.mbed_copy_nvic))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
</UL>

<P><STRONG><a name="[2a6]"></a>mbed_die</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, .\build\mbed_board.o(i.mbed_die))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[2b6]"></a>mbed_error_printf</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, .\build\mbed_board.o(i.mbed_error_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = mbed_error_printf &rArr; mbed_error_vfprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vfprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>

<P><STRONG><a name="[2a5]"></a>mbed_error_vfprintf</STRONG> (Thumb, 72 bytes, Stack size 152 bytes, .\build\mbed_board.o(i.mbed_error_vfprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = mbed_error_vfprintf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_printf
</UL>

<P><STRONG><a name="[182]"></a>mbed_main</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\mbed_sdk_boot.o(i.mbed_main))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[296]"></a>mbed_sdk_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\mbed_overrides.o(i.mbed_sdk_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = mbed_sdk_init &rArr; SetSysClock &rArr; SetSysClock_PLL_HSE &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_OC_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
</UL>

<P><STRONG><a name="[2ac]"></a>pin_function</STRONG> (Thumb, 278 bytes, Stack size 40 bytes, .\build\pinmap.o(i.pin_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + In Cycle
<LI>Call Chain = pin_function &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_Clock
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_pin_SetAFPin
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_pin_PullConfig
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinOutputType
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
</UL>

<P><STRONG><a name="[2a0]"></a>pin_mode</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, .\build\pinmap.o(i.pin_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_Clock
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_pin_PullConfig
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinOutputType
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_init_freq
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[2be]"></a>pinmap_find_function</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, .\build\mbed_pinmap_common.o(i.pinmap_find_function))
<BR><BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_function
</UL>

<P><STRONG><a name="[2bf]"></a>pinmap_find_peripheral</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, .\build\mbed_pinmap_common.o(i.pinmap_find_peripheral))
<BR><BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
</UL>

<P><STRONG><a name="[2bd]"></a>pinmap_function</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, .\build\mbed_pinmap_common.o(i.pinmap_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = pinmap_function &rArr; error &rArr; exit &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_find_function
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_init
</UL>

<P><STRONG><a name="[29e]"></a>pinmap_merge</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, .\build\mbed_pinmap_common.o(i.pinmap_merge))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = pinmap_merge &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_init_freq
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[29d]"></a>pinmap_peripheral</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, .\build\mbed_pinmap_common.o(i.pinmap_peripheral))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = pinmap_peripheral &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_find_peripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_init_freq
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_init
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[29f]"></a>pinmap_pinout</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, .\build\mbed_pinmap_common.o(i.pinmap_pinout))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + In Cycle
<LI>Call Chain = pinmap_pinout &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_init_freq
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_init
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[27d]"></a>pwmout_init</STRONG> (Thumb, 616 bytes, Stack size 24 bytes, .\build\pwmout_api.o(i.pwmout_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = pwmout_init &rArr; pwmout_period_us &rArr; pwmout_write &rArr; error &rArr; exit &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_function
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_period_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastPWM::FastPWM(PinName, int)
</UL>

<P><STRONG><a name="[2c0]"></a>pwmout_period_us</STRONG> (Thumb, 362 bytes, Stack size 56 bytes, .\build\pwmout_api.o(i.pwmout_period_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = pwmout_period_us &rArr; pwmout_write &rArr; error &rArr; exit &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_write
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_read
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_init
</UL>

<P><STRONG><a name="[2c1]"></a>pwmout_read</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, .\build\pwmout_api.o(i.pwmout_read))
<BR><BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_period_us
</UL>

<P><STRONG><a name="[2c2]"></a>pwmout_write</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, .\build\pwmout_api.o(i.pwmout_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = pwmout_write &rArr; error &rArr; exit &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmout_period_us
</UL>

<P><STRONG><a name="[1dd]"></a>serial_baud</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, .\build\serial_device.o(i.serial_baud))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = serial_baud &rArr; init_uart &rArr;  error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::baud(int)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_serial()
</UL>

<P><STRONG><a name="[21b]"></a>serial_getc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, .\build\serial_device.o(i.serial_getc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = serial_getc &rArr; serial_readable
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_readable
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_base_getc()
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
</UL>

<P><STRONG><a name="[1dc]"></a>serial_init</STRONG> (Thumb, 608 bytes, Stack size 32 bytes, .\build\serial_device.o(i.serial_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + In Cycle
<LI>Call Chain = serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vfprintf
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_serial()
</UL>

<P><STRONG><a name="[230]"></a>serial_irq_handler</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, .\build\serial_device.o(i.serial_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = serial_irq_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
</UL>

<P><STRONG><a name="[220]"></a>serial_irq_handler_asynch</STRONG> (Thumb, 304 bytes, Stack size 32 bytes, .\build\serial_device.o(i.serial_irq_handler_asynch))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = serial_irq_handler_asynch &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_rx_abort_asynch
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::interrupt_handler_asynch()
</UL>

<P><STRONG><a name="[229]"></a>serial_irq_set</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, .\build\serial_device.o(i.serial_irq_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = serial_irq_set
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetVector
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
</UL>

<P><STRONG><a name="[21d]"></a>serial_putc</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, .\build\serial_device.o(i.serial_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = serial_putc &rArr; serial_writable
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_writable
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vfprintf
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_base_putc(int)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[22b]"></a>serial_readable</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, .\build\serial_api.o(i.serial_readable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = serial_readable
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::readable()
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_getc
</UL>

<P><STRONG><a name="[2c3]"></a>serial_rx_abort_asynch</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, .\build\serial_device.o(i.serial_rx_abort_asynch))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = serial_rx_abort_asynch
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_handler_asynch
</UL>

<P><STRONG><a name="[2c7]"></a>serial_writable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, .\build\serial_api.o(i.serial_writable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = serial_writable
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
</UL>

<P><STRONG><a name="[227]"></a>sleep_manager_lock_deep_sleep</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, .\build\mbed_sleep_manager.o(i.sleep_manager_lock_deep_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = sleep_manager_lock_deep_sleep &rArr; error &rArr; exit &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_incr_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::attach(mbed::Callback&lang;void()&rang;, mbed::CAN::IrqType)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::start_transfer(const void*, int, void*, int, unsigned char, const mbed::Callback&lang;void(int)&rang;&, int)
</UL>

<P><STRONG><a name="[223]"></a>sleep_manager_unlock_deep_sleep</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, .\build\mbed_sleep_manager.o(i.sleep_manager_unlock_deep_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = sleep_manager_unlock_deep_sleep &rArr; error &rArr; exit &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_decr_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::attach(mbed::Callback&lang;void()&rang;, mbed::CAN::IrqType)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::irq_handler_asynch()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::interrupt_handler_asynch()
</UL>

<P><STRONG><a name="[24f]"></a>spi_format</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, .\build\stm_spi_api.o(i.spi_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = spi_format &rArr; init_spi &rArr; error &rArr; exit &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::format(int, int)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::_acquire()
</UL>

<P><STRONG><a name="[250]"></a>spi_frequency</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, .\build\stm_spi_api.o(i.spi_frequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = spi_frequency &rArr; spi_get_clock_freq &rArr; error &rArr; exit &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_get_clock_freq
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::frequency(int)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::_acquire()
</UL>

<P><STRONG><a name="[2c8]"></a>spi_get_clock_freq</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, .\build\spi_api.o(i.spi_get_clock_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = spi_get_clock_freq &rArr; error &rArr; exit &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_frequency
</UL>

<P><STRONG><a name="[252]"></a>spi_init</STRONG> (Thumb, 428 bytes, Stack size 64 bytes, .\build\stm_spi_api.o(i.spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = spi_init &rArr; init_spi &rArr; error &rArr; exit &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::SPI(PinName, PinName, PinName, PinName)
</UL>

<P><STRONG><a name="[24b]"></a>spi_irq_handler_asynch</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, .\build\stm_spi_api.o(i.spi_irq_handler_asynch))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = spi_irq_handler_asynch &rArr; HAL_SPI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::irq_handler_asynch()
</UL>

<P><STRONG><a name="[249]"></a>spi_master_transfer</STRONG> (Thumb, 248 bytes, Stack size 64 bytes, .\build\stm_spi_api.o(i.spi_master_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = spi_master_transfer &rArr; spi_master_start_asynch_transfer &rArr; HAL_SPI_Receive_IT &rArr; HAL_SPI_TransmitReceive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_start_asynch_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::start_transfer(const void*, int, void*, int, unsigned char, const mbed::Callback&lang;void(int)&rang;&, int)
</UL>

<P><STRONG><a name="[24e]"></a>spi_master_write</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, .\build\stm_spi_api.o(i.spi_master_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = spi_master_write &rArr; HAL_SPI_Transmit &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_ReceiveData8
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_ReceiveData16
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::write(int)
</UL>

<P><STRONG><a name="[2d0]"></a>ticker_irq_handler</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, .\build\mbed_ticker_api.o(i.ticker_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ticker_irq_handler &rArr; schedule_interrupt &rArr; update_present_time &rArr; convert_timestamp
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_irq_handler
</UL>

<P><STRONG><a name="[2d1]"></a>ticker_read</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\mbed_ticker_api.o(i.ticker_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ticker_read &rArr; ticker_read_us &rArr; initialize &rArr; schedule_interrupt &rArr; update_present_time &rArr; convert_timestamp
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
</UL>

<P><STRONG><a name="[2d2]"></a>ticker_read_us</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, .\build\mbed_ticker_api.o(i.ticker_read_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ticker_read_us &rArr; initialize &rArr; schedule_interrupt &rArr; update_present_time &rArr; convert_timestamp
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read
</UL>

<P><STRONG><a name="[7a]"></a>timer_irq_handler</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, .\build\hal_tick_32b.o(i.timer_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = timer_irq_handler &rArr; us_ticker_irq_handler &rArr; ticker_irq_handler &rArr; schedule_interrupt &rArr; update_present_time &rArr; convert_timestamp
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_irq_handler
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_tick_32b.o(i.HAL_InitTick)
</UL>
<P><STRONG><a name="[a1]"></a>us_ticker_clear_interrupt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\us_ticker_32b.o(i.us_ticker_clear_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[a0]"></a>us_ticker_disable_interrupt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\us_ticker_32b.o(i.us_ticker_disable_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>us_ticker_fire_interrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\us_ticker_32b.o(i.us_ticker_fire_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[9e]"></a>us_ticker_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\us_ticker_32b.o(i.us_ticker_init))
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[2d3]"></a>us_ticker_irq_handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\build\mbed_us_ticker_api.o(i.us_ticker_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = us_ticker_irq_handler &rArr; ticker_irq_handler &rArr; schedule_interrupt &rArr; update_present_time &rArr; convert_timestamp
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_irq_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_irq_handler
</UL>

<P><STRONG><a name="[9f]"></a>us_ticker_read</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\us_ticker_32b.o(i.us_ticker_read))
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[a2]"></a>us_ticker_set_interrupt</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, .\build\us_ticker_32b.o(i.us_ticker_set_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.constdata)
</UL>
<P><STRONG><a name="[1e6]"></a>wait</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, .\build\mbed_wait_api_no_rtos.o(i.wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = wait &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr; schedule_interrupt &rArr; update_present_time &rArr; convert_timestamp
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate(PositionSensor*, GPIOStruct*, ControllerStruct*, PreferenceWriter*)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zero_current(int*, int*)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate()
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_torque_mode()
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_encoder()
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[2b8]"></a>wait_ms</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\build\mbed_wait_api_no_rtos.o(i.wait_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = wait_ms &rArr; wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr; schedule_interrupt &rArr; update_present_time &rArr; convert_timestamp
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
</UL>

<P><STRONG><a name="[1e1]"></a>wait_us</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, .\build\mbed_wait_api_no_rtos.o(i.wait_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = wait_us &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr; schedule_interrupt &rArr; update_present_time &rArr; convert_timestamp
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_us_ticker_data
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV832x::spi_write(unsigned short)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV832x::DRV832x(mbed::SPI*, mbed::DigitalOut*)
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate(PositionSensor*, GPIOStruct*, ControllerStruct*, PreferenceWriter*)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;order_phases(PositionSensor*, GPIOStruct*, ControllerStruct*, PreferenceWriter*)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_setup_state()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_interrupt()
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_menu_state()
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[108]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(lc_numeric_c.o)(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[79]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(lc_ctype_c.o)(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[2d8]"></a>SingletonPtr&lang;PlatformMutex&rang;::get()</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, .\build\filebase.o(t._ZN12SingletonPtrI13PlatformMutexE3getEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = SingletonPtr&lang;PlatformMutex&rang;::get() &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;()
</UL>

<P><STRONG><a name="[23a]"></a>SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\filebase.o(t._ZN12SingletonPtrI13PlatformMutexEptEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = SingletonPtr&lang;PlatformMutex&rang;::operator -&rang;() &rArr; SingletonPtr&lang;PlatformMutex&rang;::get() &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;PlatformMutex&rang;::get()
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::remove_filehandle(mbed::FileHandle*)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::~FileBase()
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::FileBase(const char*, mbed::PathType)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::unlock()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::lock()
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[8e]"></a>mbed::Transaction&lang;mbed::SPI&rang;::Transaction()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, .\build\spi.o(t._ZN4mbed11TransactionINS_3SPIEEC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::Transaction&lang;mbed::SPI&rang;::Transaction() &rArr; mbed::transaction_t::transaction_t() &rArr; mbed::Callback&lang;void(int)&rang;::Callback(void(*)(int))
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::transaction_t::transaction_t()
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::dequeue_transaction()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(i.__sti___7_SPI_cpp_ab1f1164)
</UL>
<P><STRONG><a name="[33f]"></a>mbed::Transaction&lang;mbed::SPI&rang;::Transaction__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\spi.o(t._ZN4mbed11TransactionINS_3SPIEEC1Ev), UNUSED)

<P><STRONG><a name="[9b]"></a>mbed::Transaction&lang;mbed::SPI&rang;::~Transaction()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\build\spi.o(t._ZN4mbed11TransactionINS_3SPIEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::Transaction&lang;mbed::SPI&rang;::~Transaction() &rArr; mbed::transaction_t::~transaction_t() &rArr; mbed::Callback&lang;void(int)&rang;::~Callback()
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::transaction_t::~transaction_t()
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::dequeue_transaction()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(t._ZN4mbed14CircularBufferINS_11TransactionINS_3SPIEEELj2EjED1Ev)
</UL>
<P><STRONG><a name="[340]"></a>mbed::Transaction&lang;mbed::SPI&rang;::~Transaction__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\spi.o(t._ZN4mbed11TransactionINS_3SPIEED1Ev), UNUSED)

<P><STRONG><a name="[24d]"></a>mbed::CircularBuffer&lang;mbed::Transaction&lang;mbed::SPI&rang;, (unsigned)2, unsigned&rang;::pop(mbed::Transaction&lang;mbed::SPI&rang;&)</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, .\build\spi.o(t._ZN4mbed14CircularBufferINS_11TransactionINS_3SPIEEELj2EjE3popERS3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbed::CircularBuffer&lang;mbed::Transaction&lang;mbed::SPI&rang;, (unsigned)2, unsigned&rang;::pop(mbed::Transaction&lang;mbed::SPI&rang;&) &rArr; mbed::Transaction&lang;mbed::SPI&rang;::operator =(const mbed::Transaction&lang;mbed::SPI&rang;&) &rArr; mbed::Callback&lang;void(int)&rang;::operator =(const mbed::Callback&lang;void(int)&rang;&) &rArr; mbed::Callback&lang;void(int)&rang;::Callback(const mbed::Callback&lang;void(int)&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Transaction&lang;mbed::SPI&rang;::operator =(const mbed::Transaction&lang;mbed::SPI&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::dequeue_transaction()
</UL>

<P><STRONG><a name="[8f]"></a>mbed::CircularBuffer&lang;mbed::Transaction&lang;mbed::SPI&rang;, (unsigned)2, unsigned&rang;::~CircularBuffer()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\spi.o(t._ZN4mbed14CircularBufferINS_11TransactionINS_3SPIEEELj2EjED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbed::CircularBuffer&lang;mbed::Transaction&lang;mbed::SPI&rang;, (unsigned)2, unsigned&rang;::~CircularBuffer() &rArr; __aeabi_vec_dtor
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_dtor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(i.__sti___7_SPI_cpp_ab1f1164)
</UL>
<P><STRONG><a name="[341]"></a>mbed::CircularBuffer&lang;mbed::Transaction&lang;mbed::SPI&rang;, (unsigned)2, unsigned&rang;::~CircularBuffer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\spi.o(t._ZN4mbed14CircularBufferINS_11TransactionINS_3SPIEEELj2EjED1Ev), UNUSED)

<P><STRONG><a name="[d1]"></a>void mbed::Callback&lang;void(int)&rang;::function_call&lang;void(*)(int)&rang;(const void*, int)</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, .\build\i2c.o(t._ZN4mbed8CallbackIFviEE13function_callIPS1_EEvPKvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = void mbed::Callback&lang;void(int)&rang;::function_call&lang;void(*)(int)&rang;(const void*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c.o(.constdata__ZZN4mbed8CallbackIFviEE8generateIPS1_EEvRKT_E3ops)
</UL>
<P><STRONG><a name="[d3]"></a>void mbed::Callback&lang;void(int)&rang;::function_dtor&lang;void(*)(int)&rang;(void*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\i2c.o(t._ZN4mbed8CallbackIFviEE13function_dtorIPS1_EEvPv))
<BR>[Address Reference Count : 1]<UL><LI> i2c.o(.constdata__ZZN4mbed8CallbackIFviEE8generateIPS1_EEvRKT_E3ops)
</UL>
<P><STRONG><a name="[d2]"></a>void mbed::Callback&lang;void(int)&rang;::function_move&lang;void(*)(int)&rang;(void*, const void*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\i2c.o(t._ZN4mbed8CallbackIFviEE13function_moveIPS1_EEvPvPKv))
<BR>[Address Reference Count : 1]<UL><LI> i2c.o(.constdata__ZZN4mbed8CallbackIFviEE8generateIPS1_EEvRKT_E3ops)
</UL>
<P><STRONG><a name="[22e]"></a>mbed::Callback&lang;void(int)&rang;::Callback(void(*)(int))</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, .\build\serialbase.o(t._ZN4mbed8CallbackIFviEEC1EPS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::Callback&lang;void(int)&rang;::Callback(void(*)(int))
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::SPI(PinName, PinName, PinName, PinName)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::transaction_t::transaction_t()
</UL>

<P><STRONG><a name="[342]"></a>mbed::Callback&lang;void(int)&rang;::Callback__sub_object(void(*)(int))</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\serialbase.o(t._ZN4mbed8CallbackIFviEEC1EPS1_), UNUSED)

<P><STRONG><a name="[2d9]"></a>mbed::Callback&lang;void(int)&rang;::Callback(const mbed::Callback&lang;void(int)&rang;&)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, .\build\spi.o(t._ZN4mbed8CallbackIFviEEC1ERKS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::Callback&lang;void(int)&rang;::Callback(const mbed::Callback&lang;void(int)&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void(int)&rang;::operator =(const mbed::Callback&lang;void(int)&rang;&)
</UL>

<P><STRONG><a name="[343]"></a>mbed::Callback&lang;void(int)&rang;::Callback__sub_object(const mbed::Callback&lang;void(int)&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, .\build\spi.o(t._ZN4mbed8CallbackIFviEEC1ERKS2_), UNUSED)

<P><STRONG><a name="[232]"></a>mbed::Callback&lang;void(int)&rang;::~Callback()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\i2c.o(t._ZN4mbed8CallbackIFviEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::Callback&lang;void(int)&rang;::~Callback()
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::~SerialBase()
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void(int)&rang;::operator =(const mbed::Callback&lang;void(int)&rang;&)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::~SPI()
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::transaction_t::~transaction_t()
</UL>

<P><STRONG><a name="[344]"></a>mbed::Callback&lang;void(int)&rang;::~Callback__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\i2c.o(t._ZN4mbed8CallbackIFviEED1Ev), UNUSED)

<P><STRONG><a name="[234]"></a>mbed::Callback&lang;void(int)&rang;::operator =(const mbed::Callback&lang;void(int)&rang;&)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, .\build\spi.o(t._ZN4mbed8CallbackIFviEEaSERKS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbed::Callback&lang;void(int)&rang;::operator =(const mbed::Callback&lang;void(int)&rang;&) &rArr; mbed::Callback&lang;void(int)&rang;::Callback(const mbed::Callback&lang;void(int)&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void(int)&rang;::~Callback()
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void(int)&rang;::Callback(const mbed::Callback&lang;void(int)&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Transaction&lang;mbed::SPI&rang;::operator =(const mbed::Transaction&lang;mbed::SPI&rang;&)
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::start_transfer(const void*, int, void*, int, unsigned char, const mbed::Callback&lang;void(int)&rang;&, int)
</UL>

<P><STRONG><a name="[d4]"></a>void mbed::Callback&lang;void()&rang;::function_call&lang;void(*)()&rang;(const void*)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\build\main.o(t._ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = void mbed::Callback&lang;void()&rang;::function_call&lang;void(*)()&rang;(const void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops)
</UL>
<P><STRONG><a name="[d6]"></a>void mbed::Callback&lang;void()&rang;::function_dtor&lang;void(*)()&rang;(void*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\main.o(t._ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops)
</UL>
<P><STRONG><a name="[d5]"></a>void mbed::Callback&lang;void()&rang;::function_move&lang;void(*)()&rang;(void*, const void*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\main.o(t._ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops)
</UL>
<P><STRONG><a name="[184]"></a>mbed::Callback&lang;void()&rang;::Callback(void(*)())</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, .\build\main.o(t._ZN4mbed8CallbackIFvvEEC1EPS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::Callback&lang;void()&rang;::Callback(void(*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::~CAN()
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::CAN(PinName, PinName, int)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::attach(mbed::Callback&lang;void()&rang;, mbed::CAN::IrqType)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::~SerialBase()
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;Func2&rang;
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;Func4&rang;
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
</UL>

<P><STRONG><a name="[345]"></a>mbed::Callback&lang;void()&rang;::Callback__sub_object(void(*)())</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\main.o(t._ZN4mbed8CallbackIFvvEEC1EPS1_), UNUSED)

<P><STRONG><a name="[8b]"></a>mbed::Callback&lang;void()&rang;::~Callback()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\main.o(t._ZN4mbed8CallbackIFvvEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::Callback&lang;void()&rang;::~Callback()
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::~CAN()
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::CAN(PinName, PinName, int)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::attach(mbed::Callback&lang;void()&rang;, mbed::CAN::IrqType)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::~SerialBase()
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::operator =(const mbed::Callback&lang;void()&rang;&)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> can.o(i._ZN4mbed3CAND1Ev)
<LI> serialbase.o(i._ZN4mbed10SerialBaseD1Ev)
</UL>
<P><STRONG><a name="[346]"></a>mbed::Callback&lang;void()&rang;::~Callback__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, .\build\main.o(t._ZN4mbed8CallbackIFvvEED1Ev), UNUSED)

<P><STRONG><a name="[228]"></a>mbed::Callback&lang;void()&rang;::operator =(const mbed::Callback&lang;void()&rang;&)</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, .\build\can.o(t._ZN4mbed8CallbackIFvvEEaSERKS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbed::Callback&lang;void()&rang;::operator =(const mbed::Callback&lang;void()&rang;&) &rArr; mbed::Callback&lang;void()&rang;::~Callback()
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::~Callback()
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::CAN(PinName, PinName, int)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::attach(mbed::Callback&lang;void()&rang;, mbed::CAN::IrqType)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
</UL>

<P><STRONG><a name="[9c]"></a>CThunk&lang;mbed::SerialBase&rang;::trampoline(mbed::SerialBase*, void*, void(mbed::SerialBase::**)(void*))</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, .\build\serialbase.o(t._ZN6CThunkIN4mbed10SerialBaseEE10trampolineEPS1_PvPMS1_FvS4_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CThunk&lang;mbed::SerialBase&rang;::trampoline(mbed::SerialBase*, void*, void(mbed::SerialBase::**)(void*))
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialbase.o(t._ZN6CThunkIN4mbed10SerialBaseEE4initEPS1_MS1_FvPvES4_)
</UL>
<P><STRONG><a name="[22d]"></a>CThunk&lang;mbed::SerialBase&rang;::init(mbed::SerialBase*, void(mbed::SerialBase::*)(void*), void*)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, .\build\serialbase.o(t._ZN6CThunkIN4mbed10SerialBaseEE4initEPS1_MS1_FvPvES4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CThunk&lang;mbed::SerialBase&rang;::init(mbed::SerialBase*, void(mbed::SerialBase::*)(void*), void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName, int)
</UL>

<P><STRONG><a name="[9d]"></a>CThunk&lang;mbed::SPI&rang;::trampoline(mbed::SPI*, void*, void(mbed::SPI::**)(void*))</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, .\build\spi.o(t._ZN6CThunkIN4mbed3SPIEE10trampolineEPS1_PvPMS1_FvS4_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CThunk&lang;mbed::SPI&rang;::trampoline(mbed::SPI*, void*, void(mbed::SPI::**)(void*))
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(t._ZN6CThunkIN4mbed3SPIEE4initEPS1_MS1_FvPvES4_)
</UL>
<P><STRONG><a name="[251]"></a>CThunk&lang;mbed::SPI&rang;::init(mbed::SPI*, void(mbed::SPI::*)(void*), void*)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, .\build\spi.o(t._ZN6CThunkIN4mbed3SPIEE4initEPS1_MS1_FvPvES4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CThunk&lang;mbed::SPI&rang;::init(mbed::SPI*, void(mbed::SPI::*)(void*), void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::SPI(PinName, PinName, PinName, PinName)
</UL>

<P><STRONG><a name="[222]"></a>mbed::Callback&lang;void(int)&rang;::call(int) const</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, .\build\serialbase.o(t._ZNK4mbed8CallbackIFviEE4callEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = mbed::Callback&lang;void(int)&rang;::call(int) const &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::interrupt_handler_asynch()
</UL>

<P><STRONG><a name="[221]"></a>mbed::Callback&lang;void(int)&rang;::operator bool() const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\serialbase.o(t._ZNK4mbed8CallbackIFviEEcvbEv))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::interrupt_handler_asynch()
</UL>

<P><STRONG><a name="[21e]"></a>mbed::Callback&lang;void()&rang;::operator bool() const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\can.o(t._ZNK4mbed8CallbackIFvvEEcvbEv))
<BR><BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::attach(mbed::Callback&lang;void()&rang;, mbed::CAN::IrqType)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(mbed::Callback&lang;void()&rang;, mbed::SerialBase::IrqType)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::_irq_handler(unsigned, CanIrqType)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_irq_handler(unsigned, SerialIrq)
</UL>

<P><STRONG><a name="[1f2]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(d2f.o)(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commutate(ControllerStruct*, ObserverStruct*, GPIOStruct*, float)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_interrupt()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[2da]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(d2f.o)(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[203]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(daddsub_clz.o)(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commutate(ControllerStruct*, ObserverStruct*, GPIOStruct*, float)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastPWM::period(double)
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastPWM::updateTicks(unsigned)
</UL>

<P><STRONG><a name="[2dd]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(daddsub_clz.o)(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[2e0]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(dcheck1.o)(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[2e4]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(dcmpi.o)(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[270]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(ddiv.o)(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastPWM::updateTicks(unsigned)
</UL>

<P><STRONG><a name="[2e2]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(ddiv.o)(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[282]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(deqf.o)(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[2e3]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(deqf.o)(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[271]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(dfix.o)(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastPWM::updateTicks(unsigned)
</UL>

<P><STRONG><a name="[2e5]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(dfix.o)(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[277]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(dfixu.o)(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastPWM::period(double)
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastPWM::write(double)
</UL>

<P><STRONG><a name="[2e6]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(dfixu.o)(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[26f]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(dflt_clz.o)(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastPWM::period(double)
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastPWM::write(double)
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastPWM::updateTicks(unsigned)
</UL>

<P><STRONG><a name="[347]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(dflt_clz.o)(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[348]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(dleqf.o)(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[2e7]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(dleqf.o)(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[2ea]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(dleqf.o)(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[205]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(dmul.o)(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commutate(ControllerStruct*, ObserverStruct*, GPIOStruct*, float)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastPWM::period(double)
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastPWM::write(double)
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastPWM::updateTicks(unsigned)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
</UL>

<P><STRONG><a name="[2e8]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(dmul.o)(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[2dc]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(dnaninf.o)(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_ufrom_d
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[2df]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(dretinf.o)(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[28c]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(drleqf.o)(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[2e9]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(drleqf.o)(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[206]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(daddsub_clz.o)(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commutate(ControllerStruct*, ObserverStruct*, GPIOStruct*, float)
</UL>

<P><STRONG><a name="[2eb]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(daddsub_clz.o)(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[204]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(daddsub_clz.o)(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commutate(ControllerStruct*, ObserverStruct*, GPIOStruct*, float)
</UL>

<P><STRONG><a name="[2ed]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(daddsub_clz.o)(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1d5]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(f2d.o)(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commutate(ControllerStruct*, ObserverStruct*, GPIOStruct*, float)
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate(PositionSensor*, GPIOStruct*, ControllerStruct*, PreferenceWriter*)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;order_phases(PositionSensor*, GPIOStruct*, ControllerStruct*, PreferenceWriter*)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_cmd(mbed::CANMessage, ControllerStruct*)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_setup_state()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_interrupt()
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_encoder()
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[2ee]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(f2d.o)(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[2ef]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(fnaninf.o)(x$fpl$fnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frem
</UL>

<P><STRONG><a name="[101]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(fpinit.o)(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[349]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(fpinit.o)(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[34a]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(fpinit.o)(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[27f]"></a>_frem</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(frem_clz.o)(x$fpl$frem))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _frem &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmodf
</UL>

<P><STRONG><a name="[2db]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(fretinf.o)(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[27a]"></a>__aeabi_d2ulz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(dfixull.o)(x$fpl$llufromd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastPWM::period(double)
</UL>

<P><STRONG><a name="[2f0]"></a>_ll_ufrom_d</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(dfixull.o)(x$fpl$llufromd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[e3]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(printf1.o)(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
</UL>

<P><STRONG><a name="[e7]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(printf2.o)(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[2e1]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(retnan.o)(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[283]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(scalbn.o)(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>

<P><STRONG><a name="[151]"></a>_scanf_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(scanf1.o)(x$fpl$scanf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[171]"></a>_scanf_hex_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(scanf2.o)(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _scanf_hex_real &rArr; _scanf_really_hex_real &rArr; __support_ldexp &rArr; __hardfp_ldexp &rArr; __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[170]"></a>_scanf_infnan</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(scanf2.o)(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_infnan &rArr; _scanf_really_infnan
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[2f1]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(trapv.o)(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[2b3]"></a>__NVIC_SetPriority(IRQn_Type, unsigned)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, .\build\main.o(i._Z18__NVIC_SetPriority9IRQn_Typej))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[d7]"></a>__sti___8_main_cpp_prefs</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, .\build\main.o(i.__sti___8_main_cpp_prefs))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = __sti___8_main_cpp_prefs &rArr; PositionSensorAM5147::PositionSensorAM5147(int, float, int) &rArr; mbed::SPI::SPI(PinName, PinName, PinName, PinName) &rArr; spi_init &rArr; init_spi &rArr; error &rArr; exit &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CANMessage::CANMessage()
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV832x::DRV832x(mbed::SPI*, mbed::DigitalOut*)
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, const char*, int)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SPI::SPI(PinName, PinName, PinName, PinName)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::CAN(PinName, PinName, int)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorAM5147::PositionSensorAM5147(int, float, int)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreferenceWriter::PreferenceWriter(unsigned)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[8c]"></a>&lang;Func2&rang;</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\can.o(i.<Func2>))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = &lang;Func2&rang; &rArr; mbed::Callback&lang;void()&rang;::Callback(void(*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback(void(*)())
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can.o(i._ZN4mbed3CANC1E7PinNameS1_i)
</UL>
<P><STRONG><a name="[185]"></a>can_irq</STRONG> (Thumb, 296 bytes, Stack size 96 bytes, .\build\can_api.o(i.can_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = can_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_TX_IRQHandler
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_SCE_IRQHandler
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_TX_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_SCE_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[2a1]"></a>can_registers_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, .\build\can_api.o(i.can_registers_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = can_registers_init &rArr; can_frequency &rArr; error &rArr; exit &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_frequency
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_init_freq
</UL>

<P><STRONG><a name="[29c]"></a>can_speed</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, .\build\can_api.o(i.can_speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = can_speed
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_frequency
</UL>

<P><STRONG><a name="[2a9]"></a>LL_GPIO_SetPinMode</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, .\build\gpio_api.o(i.LL_GPIO_SetPinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_GPIO_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
</UL>

<P><STRONG><a name="[2b7]"></a>gpio_write</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\build\mbed_board.o(i.gpio_write))
<BR><BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
</UL>

<P><STRONG><a name="[290]"></a>_gpio_init_out</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, .\build\mbed_gpio.o(i._gpio_init_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out_ex
</UL>

<P><STRONG><a name="[292]"></a>gpio_write</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\build\mbed_gpio.o(i.gpio_write))
<BR><BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_out
</UL>

<P><STRONG><a name="[2d6]"></a>convert_timestamp</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, .\build\mbed_ticker_api.o(i.convert_timestamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = convert_timestamp
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
</UL>

<P><STRONG><a name="[2af]"></a>initialize</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, .\build\mbed_ticker_api.o(i.initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = initialize &rArr; schedule_interrupt &rArr; update_present_time &rArr; convert_timestamp
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
</UL>

<P><STRONG><a name="[2b1]"></a>schedule_interrupt</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, .\build\mbed_ticker_api.o(i.schedule_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = schedule_interrupt &rArr; update_present_time &rArr; convert_timestamp
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_irq_handler
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>

<P><STRONG><a name="[2b0]"></a>update_present_time</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, .\build\mbed_ticker_api.o(i.update_present_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = update_present_time &rArr; convert_timestamp
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_timestamp
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_irq_handler
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>

<P><STRONG><a name="[2bb]"></a>LL_GPIO_SetPinOutputType</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\build\pinmap.o(i.LL_GPIO_SetPinOutputType))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_GPIO_SetPinOutputType
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
</UL>

<P><STRONG><a name="[2cf]"></a>LL_GPIO_SetPinPull</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, .\build\pinmap.o(i.LL_GPIO_SetPinPull))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_GPIO_SetPinPull
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_pin_PullConfig
</UL>

<P><STRONG><a name="[2bc]"></a>stm_pin_PullConfig</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, .\build\pinmap.o(i.stm_pin_PullConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = stm_pin_PullConfig &rArr; LL_GPIO_SetPinPull
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinPull
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
</UL>

<P><STRONG><a name="[2ba]"></a>stm_pin_SetAFPin</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, .\build\pinmap.o(i.stm_pin_SetAFPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = stm_pin_SetAFPin
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
</UL>

<P><STRONG><a name="[2c6]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, .\build\serial_device.o(i.__NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_set
</UL>

<P><STRONG><a name="[2c5]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\build\serial_device.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_set
</UL>

<P><STRONG><a name="[2c4]"></a>__NVIC_SetVector</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\serial_device.o(i.__NVIC_SetVector))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_set
</UL>

<P><STRONG><a name="[95]"></a>uart1_irq</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\build\serial_device.o(i.uart1_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart1_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_device.o(i.serial_irq_set)
</UL>
<P><STRONG><a name="[96]"></a>uart2_irq</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\build\serial_device.o(i.uart2_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart2_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_device.o(i.serial_irq_set)
</UL>
<P><STRONG><a name="[97]"></a>uart3_irq</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\build\serial_device.o(i.uart3_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart3_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_device.o(i.serial_irq_set)
</UL>
<P><STRONG><a name="[98]"></a>uart4_irq</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\build\serial_device.o(i.uart4_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart4_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_device.o(i.serial_irq_set)
</UL>
<P><STRONG><a name="[99]"></a>uart5_irq</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\build\serial_device.o(i.uart5_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart5_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_device.o(i.serial_irq_set)
</UL>
<P><STRONG><a name="[9a]"></a>uart6_irq</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\build\serial_device.o(i.uart6_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart6_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_device.o(i.serial_irq_set)
</UL>
<P><STRONG><a name="[2d5]"></a>uart_irq</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, .\build\serial_device.o(i.uart_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart6_irq
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart5_irq
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_irq
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_irq
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_irq
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_irq
</UL>

<P><STRONG><a name="[89]"></a>&lang;Func4&rang;</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\serialbase.o(i.<Func4>))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = &lang;Func4&rang; &rArr; mbed::Callback&lang;void()&rang;::Callback(void(*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void()&rang;::Callback(void(*)())
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialbase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_i)
</UL>
<P><STRONG><a name="[d8]"></a>__sti___7_SPI_cpp_ab1f1164</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, .\build\spi.o(i.__sti___7_SPI_cpp_ab1f1164))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __sti___7_SPI_cpp_ab1f1164 &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.init_array)
</UL>
<P><STRONG><a name="[7e]"></a>SPI_2linesRxISR_16BIT</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, .\build\stm32f4xx_hal_spi.o(i.SPI_2linesRxISR_16BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI_2linesRxISR_16BIT &rArr; SPI_CloseRxTx_ISR &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_IT)
</UL>
<P><STRONG><a name="[85]"></a>SPI_2linesRxISR_16BITCRC</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, .\build\stm32f4xx_hal_spi.o(i.SPI_2linesRxISR_16BITCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SPI_2linesRxISR_16BITCRC &rArr; SPI_CloseRxTx_ISR &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(i.SPI_2linesRxISR_16BIT)
</UL>
<P><STRONG><a name="[80]"></a>SPI_2linesRxISR_8BIT</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, .\build\stm32f4xx_hal_spi.o(i.SPI_2linesRxISR_8BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI_2linesRxISR_8BIT &rArr; SPI_CloseRxTx_ISR &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_IT)
</UL>
<P><STRONG><a name="[86]"></a>SPI_2linesRxISR_8BITCRC</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, .\build\stm32f4xx_hal_spi.o(i.SPI_2linesRxISR_8BITCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SPI_2linesRxISR_8BITCRC &rArr; SPI_CloseRxTx_ISR &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(i.SPI_2linesRxISR_8BIT)
</UL>
<P><STRONG><a name="[7f]"></a>SPI_2linesTxISR_16BIT</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, .\build\stm32f4xx_hal_spi.o(i.SPI_2linesTxISR_16BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI_2linesTxISR_16BIT &rArr; SPI_CloseRxTx_ISR &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_IT)
</UL>
<P><STRONG><a name="[81]"></a>SPI_2linesTxISR_8BIT</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, .\build\stm32f4xx_hal_spi.o(i.SPI_2linesTxISR_8BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI_2linesTxISR_8BIT &rArr; SPI_CloseRxTx_ISR &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_IT)
</UL>
<P><STRONG><a name="[1a4]"></a>SPI_CheckFlag_BSY</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, .\build\stm32f4xx_hal_spi.o(i.SPI_CheckFlag_BSY))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseTx_ISR
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>

<P><STRONG><a name="[1bb]"></a>SPI_CloseRxTx_ISR</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, .\build\stm32f4xx_hal_spi.o(i.SPI_CloseRxTx_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPI_CloseRxTx_ISR &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CheckFlag_BSY
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxRxCpltCallback
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RxCpltCallback
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_2linesTxISR_8BIT
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_2linesTxISR_16BIT
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_2linesRxISR_8BITCRC
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_2linesRxISR_8BIT
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_2linesRxISR_16BITCRC
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_2linesRxISR_16BIT
</UL>

<P><STRONG><a name="[1bf]"></a>SPI_CloseRx_ISR</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, .\build\stm32f4xx_hal_spi.o(i.SPI_CloseRx_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_CloseRx_ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RxCpltCallback
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RxISR_8BITCRC
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RxISR_8BIT
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RxISR_16BITCRC
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RxISR_16BIT
</UL>

<P><STRONG><a name="[1c0]"></a>SPI_CloseTx_ISR</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, .\build\stm32f4xx_hal_spi.o(i.SPI_CloseTx_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPI_CloseTx_ISR &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CheckFlag_BSY
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxCpltCallback
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TxISR_8BIT
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TxISR_16BIT
</UL>

<P><STRONG><a name="[7b]"></a>SPI_DMAAbortOnError</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, .\build\stm32f4xx_hal_spi.o(i.SPI_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_IRQHandler)
</UL>
<P><STRONG><a name="[7c]"></a>SPI_RxISR_16BIT</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, .\build\stm32f4xx_hal_spi.o(i.SPI_RxISR_16BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_RxISR_16BIT &rArr; SPI_CloseRx_ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_Receive_IT)
</UL>
<P><STRONG><a name="[87]"></a>SPI_RxISR_16BITCRC</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, .\build\stm32f4xx_hal_spi.o(i.SPI_RxISR_16BITCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_RxISR_16BITCRC &rArr; SPI_CloseRx_ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(i.SPI_RxISR_16BIT)
</UL>
<P><STRONG><a name="[7d]"></a>SPI_RxISR_8BIT</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, .\build\stm32f4xx_hal_spi.o(i.SPI_RxISR_8BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_RxISR_8BIT &rArr; SPI_CloseRx_ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_Receive_IT)
</UL>
<P><STRONG><a name="[88]"></a>SPI_RxISR_8BITCRC</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, .\build\stm32f4xx_hal_spi.o(i.SPI_RxISR_8BITCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_RxISR_8BITCRC &rArr; SPI_CloseRx_ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(i.SPI_RxISR_8BIT)
</UL>
<P><STRONG><a name="[82]"></a>SPI_TxISR_16BIT</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, .\build\stm32f4xx_hal_spi.o(i.SPI_TxISR_16BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI_TxISR_16BIT &rArr; SPI_CloseTx_ISR &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseTx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit_IT)
</UL>
<P><STRONG><a name="[83]"></a>SPI_TxISR_8BIT</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, .\build\stm32f4xx_hal_spi.o(i.SPI_TxISR_8BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI_TxISR_8BIT &rArr; SPI_CloseTx_ISR &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseTx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit_IT)
</UL>
<P><STRONG><a name="[1bc]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, .\build\stm32f4xx_hal_spi.o(i.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CheckFlag_BSY
</UL>

<P><STRONG><a name="[1a3]"></a>SPI_WaitTXEFlagStateUntilTimeout</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, .\build\stm32f4xx_hal_spi.o(i.SPI_WaitTXEFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_WaitTXEFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>

<P><STRONG><a name="[1ab]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 102 bytes, Stack size 12 bytes, .\build\stm32f4xx_hal_tim.o(i.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[1ad]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, .\build\stm32f4xx_hal_tim.o(i.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[1ae]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, .\build\stm32f4xx_hal_tim.o(i.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[1a6]"></a>TIM_CCxNChannelCmd</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, .\build\stm32f4xx_hal_tim_ex.o(i.TIM_CCxNChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_CCxNChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Start
</UL>

<P><STRONG><a name="[84]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, .\build\stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_DMAAbortOnError &rArr; HAL_UART_ErrorCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[1b4]"></a>UART_EndRxTransfer</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, .\build\stm32f4xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1b7]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, .\build\stm32f4xx_hal_uart.o(i.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_EndTransmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1b3]"></a>UART_Receive_IT</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, .\build\stm32f4xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1ba]"></a>UART_SetConfig</STRONG> (Thumb, 864 bytes, Stack size 24 bytes, .\build\stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1b6]"></a>UART_Transmit_IT</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, .\build\stm32f4xx_hal_uart.o(i.UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[2cd]"></a>LL_SPI_ReceiveData16</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\stm_spi_api.o(i.LL_SPI_ReceiveData16))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_write
</UL>

<P><STRONG><a name="[2ce]"></a>LL_SPI_ReceiveData8</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\stm_spi_api.o(i.LL_SPI_ReceiveData8))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_write
</UL>

<P><STRONG><a name="[2ca]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\build\stm_spi_api.o(i.__NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_irq_handler_asynch
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_start_asynch_transfer
</UL>

<P><STRONG><a name="[2c9]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, .\build\stm_spi_api.o(i.__NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_irq_handler_asynch
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_start_asynch_transfer
</UL>

<P><STRONG><a name="[2cb]"></a>spi_master_start_asynch_transfer</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, .\build\stm_spi_api.o(i.spi_master_start_asynch_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = spi_master_start_asynch_transfer &rArr; HAL_SPI_Receive_IT &rArr; HAL_SPI_TransmitReceive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit_IT
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive_IT
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive_IT
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_transfer
</UL>

<P><STRONG><a name="[1db]"></a>init_serial()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(i._Z11init_serialv))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = init_serial() &rArr; serial_init &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[1f9]"></a>handle_open_errors(int, unsigned)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(i._Z18handle_open_errorsij))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = handle_open_errors(int, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[2ec]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(daddsub_clz.o)(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[2de]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\fz_wm.l(daddsub_clz.o)(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[142]"></a>_fp_digits</STRONG> (Thumb, 428 bytes, Stack size 96 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_fp_dec.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[74]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(_printf_char_common.o)(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[150]"></a>_local_sscanf</STRONG> (Thumb, 60 bytes, Stack size 56 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(strtod.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[16c]"></a>_fp_value</STRONG> (Thumb, 508 bytes, Stack size 88 bytes, D:\KEIL5\ARM\ARMCC\Bin\..\lib\armlib\c_w.l(scanf_fp.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
